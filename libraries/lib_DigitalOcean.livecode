script "lib_DigitalOcean"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_DigitalOcean
type: library
version: 0.9

/*
A library for interfacing with the DigitalOcean hosting service - http://digitalocean.com
*/

constant OceanApiRoot = "https://api.digitalocean.com/v2/"


--> Working on
-

--> DigitalOcean | Fetch
-
function digitalocean_FetchDropletIP dropletName, pDropletInfoArray
   -- a bit hacky (assumes v4 etc)
   if pDropletInfoArray is not an array then
      put digitalocean_FetchDropletInfoArray() into pDropletInfoArray
   end if
   put pDropletInfoArray ["droplets"] into dropletArray
   
   repeat for each key dropletNum in dropletArray
      put dropletArray [dropletNum]["name"] into foundName
      if foundName = dropletName then
         put dropletArray [dropletNum]["networks"]["v4"][1]["ip_address"] into dropletIP
         return dropletIP
      end if
   end repeat
   return empty
end digitalocean_FetchDropletIP

function digitalocean_FetchDropletName someTLD, pDomainArray, pDropletInfoArray
   /*
   This looks for the "@" address of type "A" int the DNS records
   */
   if pDomainArray is not an array then
      put digitalocean_FetchDomainArray (someTLD) into pDomainArray
   end if
   put digitalocean_ExtractIpAddessFrom (pDomainArray) into someIP
   --
   if pDropletInfoArray is empty then
      put digitalocean_FetchDropletInfoArray() into pDropletInfoArray
   end if
   put digitalocean_TranslateIP (someIP, pDropletInfoArray) into dropletName
   return dropletName
end digitalocean_FetchDropletName


--> DigitalOcean | Shell
-
function digitalOcean_FetchFileFromIP somePath, dropletIP, pSshUserName   
   shell_BashParamEscape somePath
   put ssh_FetchFile (dropletIP, somePath, pSshUserName) into someData
   set the itemdelimiter to ":"
   if (item 1 of someData = "cat" and item -1 of someData = " No such file or directory") then return empty
   return someData
end digitalOcean_FetchFileFromIP

command digitalOcean_StoreData someData, dropletName, pathToStore, pSshUserName
   put the tempname into localFile
   put someData into url ("binfile://" & localFile)
   digitalOcean_StoreFile pathToStore, localFile, dropletName, pSshUserName
   return the result
end digitalOcean_StoreData

command digitalOcean_StoreFile pathToStore, localFile, dropletName, sshUserName
   put digitalOcean_GetDropletIP (dropletName) into serverAddress
   server_StoreFile localFile, pathToStore, serverAddress, sshUserName
   put the result into someResult
   return someResult
end digitalOcean_StoreFile

command digitalOcean_DeleteFile pathToDelete, dropletName, sshUserName
   put digitalOcean_GetDropletIP (dropletName) into serverAddress
   if http_CheckIP (serverAddress) is false then return "error, fetching ip address for droplet" && dropletName
   
   server_DeleteFile pathToDelete, serverAddress, sshUserName
   put the result into someResult
   return someResult
end digitalOcean_DeleteFile

command digitalOcean_StoreText someData, dropletName, pathToStore, pSshUserName
   put the tempname into localFile
   put someData into url ("file://" & localFile)
   digitalOcean_StoreFile pathToStore, localFile, dropletName, pSshUserName
   return the result
end digitalOcean_StoreText

function digitalOcean_FetchFile somePath, pDropletName, pSshUserName
   put digitalOcean_GetDropletIP (pDropletName) into dropletIP
   if http_CheckIP (dropletIP) is false then
      return "Error, fetching ip address for droplet" && pDropletName
   end if
   
   put digitalOcean_FetchFileFromIP (somePath, dropletIP, pSshUserName) into someData
   return someData
end digitalOcean_FetchFile


--> DigitalOcean | Account
-
function digitalOcean_FetchAccountJSON
   -- curl -X GET -H "Content-Type: application/json" -H "Authorization: Bearer 65a97f6607b896379439cba3ae0d895a701eb11e78a6dd74240e0c1025806bb7" 
   -- "https://api.digitalocean.com/v2/account" 
   
   put digitalocean_FetchJson ("account") into accountJSON
   return accountJSON
end digitalOcean_FetchAccountJSON

function digitalOcean_FetchAccountJSON
   -- curl -X GET -H "Content-Type: application/json" -H "Authorization: Bearer 65a97f6607b896379439cba3ae0d895a701eb11e78a6dd74240e0c1025806bb7" 
   -- "https://api.digitalocean.com/v2/account" 
   
   put digitalocean_FetchJsonArray ("account") into resultArray
   return resultArray
end digitalOcean_FetchAccountJSON


--> DigitalOcean | Wiki
-
function digitalocean_FetchWikiFolders dropletName, pListAll
   -- requires public ssh key to be installed on server
   put digitalOcean_GetDropletIP (dropletName) into dropletIP
   if http_CheckIP (dropletIP) is false then return "error, fetching ip address for droplet" && dropletName
   
   if pListAll is true then
      put "ssh root@" & dropletIP && "ls -la .wiki/" into someShell
   else
      put "ssh root@" & dropletIP && "ls .wiki/" into someShell
   end if
   put word 1 to -1 of shell (someShell) into wikiFolders
   return wikiFolders
end digitalocean_FetchWikiFolders

function digitalocean_FetchWikiFiles fedwikiDomain, dropletName, pListAll
   -- requires public ssh key to be installed on server
   put digitalOcean_GetDropletInfoArray() into pIndexedDropletArray
   put digitalOcean_GetDropletIP (dropletName, pIndexedDropletArray) into dropletIP
   if http_CheckIP (dropletIP) is false then return "error, fetching ip address for droplet" && dropletName
   
   put "ssh root@" & dropletIP && "ls" into someShell
   if pListAll is true then
      put space &  "-la" after someShell
   end if
   
   shell_BashParamEscape fedwikiDomain
   -- .wiki/actual.world/pages
   put space & ".wiki/" & fedwikiDomain & "/pages/" after someShell
   
   put word 1 to -1 of shell (someShell) into wikiPageFiles
   return wikiPageFiles
end digitalocean_FetchWikiFiles


--> DigitalOcean | REST | Array
-
function digitalocean_FetchDomainArray oceanDomainName
   -- see "digitalocean_GetDomainArray" 
   -- which gets same (cached) information without being wrapped in "domain" key
   
   -- constant ApiStem = "https://api.digitalocean.com/v2/domains/"
   -- put ApiStem & oceanDomainName into apiUrl
   -- curl -X GET -H 'Content-Type: application/json' -H 'Authorization: Bearer [[apiToken]]' "[[apiUrl]]"
   
   put "domains/" & oceanDomainName into domainPath
   put digitalocean_FetchJsonArray (domainPath) into domainInfoArray
   return domainInfoArray
end digitalocean_FetchDomainArray

function digitalocean_FetchDomainInfoArray pRecordsPerPage
   -- curl -X GET -H 'Content-Type: application/json' -H 'Authorization: Bearer $TOKEN' "https://api.digitalocean.com/v2/domains"
   -- ?per_page=2
   -- let's fetch up to 200 domains (but should paginate)
   if pRecordsPerPage is empty then put 200 into pRecordsPerPage
   put digitalocean_FetchJsonArray ("domains", pRecordsPerPage) into domainInfoArray
   return domainInfoArray
end digitalocean_FetchDomainInfoArray

function digitalocean_FetchIndexedActionArray
   -- curl -X GET "https://api.digitalocean.com/v2/actions" -H "Authorization: Bearer $TOKEN" 
   put digitalocean_FetchJsonArray ("actions") into indexedActionArray
   return indexedDropletArray
end digitalocean_FetchIndexedActionArray

function digitalocean_FetchDropletInfoArray
   -- curl -X GET "https://api.digitalocean.com/v2/droplets" -H "Authorization: Bearer $TOKEN" 
   put digitalocean_FetchJsonArray ("droplets") into dropletArray
   return dropletArray
end digitalocean_FetchDropletInfoArray


--> DigitalOcean | REST
-
function digitalocean_FetchJsonArray someCommand, pRecordsPerPage
   put digitalocean_FetchJson (someCommand, pRecordsPerPage) into someJSON
   put json_ToArray (someJSON) into someArray
   return someArray
end digitalocean_FetchJsonArray

function digitalocean_FetchJson someCommand, pRecordsPerPage
   -- v2
   put OceanApiRoot & someCommand into someUrl
   if pRecordsPerPage is not empty then
      put "?per_page=" & pRecordsPerPage after someUrl
   end if
   
   digitalocean_SetAuthHeaders
   put url someUrl into someJSON
   return someJSON
end digitalocean_FetchJson

command digitalocean_RestDelete domainPath
   -- v2
   -- this seems slow it would be good to have async with callback?
   
   put OceanApiRoot & domainPath into someUrl
   digitalocean_SetAuthHeaders
   delete url someUrl
   put the result into someResult
   
   switch someResult
      case "error 422 Unprocessable Entity"
         /*
         The 422 (Unprocessable Entity) status code means the server
         understands the content type of the request entity (hence a
         415(Unsupported Media Type) status code is inappropriate), and the
         syntax of the request entity is correct (thus a 400 (Bad Request)
         status code is inappropriate) but was unable to process the contained
         instructions.  For example, this error condition may occur if an XML
         request body contains well-formed (i.e., syntactically correct), but
         semantically erroneous, XML instructions.
         */
         return someResult & CR & CR & someJSON
      case "invalid host address"
         return someResult
      default
         dispatch "digitalocean_UpdateDomainInfoArray"
         return someResult
   end switch
end digitalocean_RestDelete

command digitalocean_RestPut domainPath, someJSON
   -- v2
   put OceanApiRoot & domainPath into someUrl
   digitalocean_SetAuthHeaders
   
   put someJSON into url someUrl
   put the result into someResult
   return someResult
end digitalocean_RestPut

command digitalocean_RestPost domainPath, someJSON
   -- v2
   put OceanApiRoot & domainPath into someUrl
   digitalocean_SetAuthHeaders
   
   post someJSON to url someUrl
   put the result into someResult
   
   switch someResult
      case "error 422 Unprocessable Entity"
         /*
         The 422 (Unprocessable Entity) status code means the server
         understands the content type of the request entity (hence a
         415(Unsupported Media Type) status code is inappropriate), and the
         syntax of the request entity is correct (thus a 400 (Bad Request)
         status code is inappropriate) but was unable to process the contained
         instructions.  For example, this error condition may occur if an XML
         request body contains well-formed (i.e., syntactically correct), but
         semantically erroneous, XML instructions.
         */
         return someResult & CR & CR & someJSON
      case "invalid host address"
         return someResult
      default
         dispatch "digitalocean_UpdateDomainInfoArray"
         return someResult
   end switch
end digitalocean_RestPost


--> DigitalOcean | REST | Authentication
-
function digitalocean_GetApiKey
   put secret_Get ("OceanApiKey", "apiKey") into oAuthToken
   return oAuthToken 
end digitalocean_GetApiKey

command digitalocean_SetApiKey oAuthToken
   secret_Set "OceanApiKey", oAuthToken, "apiKey"
   put the result into modelDataFile
   return modelDataFile
end digitalocean_SetApiKey

command digitalocean_SetAuthHeaders
   -- http_SetBasicAuthentication "Bearer", somePassWord, moreHeaders
   put digitalocean_GetApiKey() into oceanApiKey
   
   put "Content-Type: application/json" into someHeader
   put CR & "Authorization: Bearer" && oceanApiKey after someHeader
   set the httpheaders to someHeader
end digitalocean_SetAuthHeaders


--> Deps
-
function secret_Get secretName
   -- for server use only
   if the environment is not "server" then pass "secret_Get"
   --
   put rigFetchConfigItem (secretName) into someSecret
   return someSecret
end secret_Get

function http_CheckIP dropletIP
   -- lib_HTTP
   -- this checks to see if it is a valid IP adresss (rough check)
   set the itemdelimiter to "."
   if the number of items of dropletIP is not 4 then return false
   repeat for each item testItem in dropletIP
      if testItem is not a number then return false
   end repeat
   return true
end http_CheckIP
