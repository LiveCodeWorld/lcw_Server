script "lib_RemoteServer"
--> MetaData
-
license: GPLv3
name: lib_RemoteServer
type: script library
version: 0.2

/*
This library  is for manipulating a remote server using ssh and scp.
It should work on the desktop or from server to server.

As there are no passwords (it relies on public/private key access on the server), 
and REST accesspoints can be secured using DreamFactory, 
this is much more secure than scripting things directly in LiveCode.

== To Do ==
At the moment we use local variables for speed.
I don't think spped is a requirement for server oepratiosn. Security is more important.
We should instead use local file array based access for simplicity (and therefore secirity)
Remove this loca vairable stuff and utilise functions that access sotred arrays instead.
*/


--> Variables
-
constant LCW_ServerURL = "rest.livecode.world"
local LocalArray


--> Working on
-
function server_FetchPrefArray pProjectName
   if pProjectName is empty then put "Default" into pProjectName
   put pref_FetchValue ("server_Array", pProjectName) into serverPrefArray
   return serverPrefArray
end server_FetchPrefArray

command server_SavePrefArray serverPrefArray, pProjectName
   if pProjectName is empty then put "Default" into pProjectName
   pref_SaveValue "server_Array", serverPrefArray, pProjectName
   put the result into dataArray
   return dataArray
end server_SavePrefArray


--> Server | Remote | Upload
-
command server_UploadStacks stackNames
   repeat for each line stackName in stackNames
      set the cursor to busy
      server_UploadStack stackName
   end repeat
end server_UploadStacks

command server_UploadStack stackName, pDontNotify
   put the filename of stack stackName into stackPath
   set the itemdelimiter to "/"
   put item -1 of stackPath into shortPath
   put rig_StackPath (shortPath) into serverStackPath
   
   put the name of stack stackName into stackObject
   save stackObject
   
   put server_GetURL() into serverAddress
   put server_GetSshUser() into sshUser
   put server_GetSshKeyPath() into sshKeyPath
   server_StoreFile stackPath, serverStackPath, serverAddress, sshUser, sshKeyPath
   put the result into someResult
   
   if pDontNotify is not true then
      put merge ("Uploaded stack" && shortPath && "to [[serverAddress]]!") into someComment
      return someComment
   end if
   return someResult
end server_UploadStack



--> Server | Remote | Model | Utils
-
command server_SetURL serverURL
   -- use to switch server configuration
   put serverURL into LocalArray ["serverURL"]
end server_SetURL

function server_GetURL
   put LocalArray ["serverURL"] into serverURL
   if serverURL is empty then put LCW_ServerURL into serverURL
   return serverURL
end server_GetURL

function server_GetSshUser pServerURL
   return server_GetProperty ("sshUser", pServerURL)
end server_GetSshUser

function server_GetSshKeyPath pServerURL
   return server_GetProperty ("sshKeyPath", pServerURL)
end server_GetSshKeyPath

function server_GetDropletName pServerURL
   return server_GetProperty ("dropletName", pServerURL)
end server_GetDropletName

function server_GetIPaddress pServerURL
   return server_GetProperty ("serverAddress", pServerURL)
end server_GetIPaddress


--> Server | Remote | Model
-
function server_GetProperty someKey, pServerURL
   put server_GetArray (pServerURL) into serverArray
   put serverArray [someKey] into someValue
   return someValue
end server_GetProperty

command server_SetProperty someKey, someValue, pServerURL
   put server_GetArray (pServerURL) into serverArray
   put someValue into serverArray [someKey]
   server_SetArray serverArray, pServerURL
   return serverArray
end server_SetProperty

function server_GetArray pServerURL
   if pServerURL is empty then put server_GetURL() into pServerURL
   --
   put server_FetchPrefArray () into serverPrefArray
   put serverPrefArray [pServerURL] into serverArray
   return serverArray
end server_GetArray

command server_SetArray serverArray, pServerURL
   if pServerURL is empty then put server_GetURL() into pServerURL
   --
   put server_FetchPrefArray () into serverPrefArray
   put serverArray into serverPrefArray [pServerURL]
   server_SavePrefArray serverPrefArray
   return serverPrefArray
end server_SetArray

command server_DeleteArray serverURL
   if pServerURL is empty then put server_GetURL() into pServerURL
   -- 
   put server_FetchPrefArray() into serverArray
   delete variable serverArray [serverURL]
   server_SavePrefArray serverArray
end server_DeleteArray


--> Server | Shell | Wrappers
-
command server_StoreData someData, pathToStore, serverAddress, sshUser, pSshKeyPath
   -- uses "scp" and private keys
   put the tempname into localFile
   put someData into url ("binfile://" & localFile)
   server_StoreFile localFile, pathToStore, serverAddress, sshUser
   put the result into shellResult
   return shellResult
end server_StoreData
