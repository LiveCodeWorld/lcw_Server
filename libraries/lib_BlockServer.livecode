script "lib_BlockServer"
--> MetaData
-
name: lib_BlockServer
type: behavior
version: 1.0
copyright: David Bovill
licence:  GPLv3

/*
This behavior is designed to extend, the basic Livecode Server Daemon, to serve Fedwiki Files.
This behavior inherits the Livecode Daemon behavior script.
*/

--> Objects and Files
-
/*
These handlers fix the the behaviors of the server to use a given root to serve files
and define the stack / control used for the server, and the router.

In this case the server and router are the same control (usually a stack).
Set the behavior of a stack to this script-only-stack and we are good to go. 
*/

--> FedWiki | Page | Action
-
command fedwiki_DoAction actionArray, pageSlug
   put actionArray ["type"] into actionType
   switch actionType
      case "edit"
         fedwiki_ActionEdit pageSlug, actionArray
         break
      case "create"
         fedwiki_ActionCreate pageSlug, actionArray
         break
      case "add"
         fedwiki_ActionAdd pageSlug, actionArray
         break
      case "move"
         fedwiki_ActionMove pageSlug, actionArray
         break
      case "remove"
         fedwiki_ActionRemove pageSlug, actionArray
         break
      case "fork"
         fedwiki_ActionFork pageSlug, actionArray
         break
      default
         display_Array actionArray, ("New action" && actionType && pageSlug)
   end switch
   -- display_Array actionArray, actionType
end fedwiki_DoAction

command fedwiki_ActionRemove pageSlug, actionArray
   put actionArray ["id"] into itemID
   put fedwiki_FetchLocalOrDefaultArray (pageSlug) into pageArray
   put pageArray ["story"] into storyArray
   put fedwiki_FindStoryItemID (pageArray, itemID) into storyItemNum
   
   -- let's delete the item and renumber
   put item 2 of the extents of storyArray into maxNum
   repeat with toMoveNum = (storyItemNum + 1) to maxNum
      put toMoveNum - 1 into previousNum
      put storyArray [toMoveNum] into storyArray [previousNum]
   end repeat
   delete variable storyArray [maxNum]
   
   -- add to journal
   put pageArray ["journal"] into journalArray
   fedwiki_AddToJournalArray journalArray, actionArray, "remove"
   put journalArray into pageArray ["journal"]
   
   -- save to disk
   put json_FromArray (pageArray) into pageJSON  
   fedwiki_SetLocalPageJson pageSlug, pageJSON, pFedwikiDomain, pLocalWikiFolder
end fedwiki_ActionRemove

command fedwiki_ActionMove pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   put fedwiki_FetchLocalOrDefaultArray (pageSlug) into pageArray
   put pageArray ["story"] into storyArray
   
   put actionArray ["order"] into orderArray
   repeat for each key orderNum in orderArray
      put orderArray [orderNum] into itemID
      put fedwiki_FindStoryItemID (pageArray, itemID) into oldStoryItemNum
      put storyArray [oldStoryItemNum] into newPageArray [orderNum]
   end repeat
   put newPageArray into pageArray ["story"]
   
   -- now add a "move" to the journal
   put pageArray ["journal"] into journalArray
   fedwiki_AddToJournalArray journalArray, actionArray, "move"
   put journalArray into pageArray ["journal"]
   
   put actionArray ["date"] into pCreateMilliSeconds
   fedwiki_SetLocalPageArray pageSlug, pageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   return the result
end fedwiki_ActionMove

command fedwiki_ActionAdd pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   local pageArray
   
   put fedwiki_FetchLocalOrDefaultArray (pageSlug) into pageArray
   
   put actionArray ["id"] into itemID
   put actionArray ["after"] into afterID
   put actionArray ["item"]["type"] into itemType
   
   switch itemType
      case "factory"
         -- fedwiki_AddFactoryToPageArray pageArray, itemID
         put fedwiki_ConstructFactoryArray (itemID) into itemArray
         fedwiki_PageArrayAddToEnd itemArray, pageArray
         break
      default
         display_Array actionArray, ("Add undefined" && itemType)
   end switch
   
   put json_FromArray (pageArray) into pageJSON  
   fedwiki_SetLocalPageJson pageSlug, pageJSON, pFedwikiDomain, pLocalWikiFolder
   return pageArray
end fedwiki_ActionAdd

command fedwiki_ActionEdit pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   put fedwiki_GetLocalOrDefaultPageJson (pageSlug) into pageJSON
   put json_ToArray (pageJSON) into pageArray
   
   --this does any type of edit specified by actionArray?
   fedwiki_PageArrayEdit pageArray, actionArray
   put the result into someError
   
   -- now we sould update the JSON file and possibly the site map
   put actionArray ["date"] into pCreateMilliSeconds
   fedwiki_SetLocalPageArray pageSlug, pageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   
   -- and maybe the site map
   return pageArray
end fedwiki_ActionEdit

command fedwiki_ActionCreate pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   -- create a blank new page
   put actionArray ["date"] into pCreateMilliSeconds
   put actionArray ["item"]["title"] into pageTitle
   
   -- put fedwiki_ConstructNewPageArray (pageTitle) into pageArray 
   put pageTitle into pageArray ["title"]  
   put actionArray into pageArray ["journal"][1]
   
   fedwiki_SetLocalPageArray pageSlug, pageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   return pageArray
end fedwiki_ActionCreate

command fedwiki_ActionFork pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   -- create a blank new page
   put actionArray ["date"] into pCreateMilliSeconds
   put actionArray ["item"] into forkPageArray
   put forkPageArray ["title"] into pageTitle
   
   put fedwiki_ConstructSlug (pageTitle) into pageSlug
   fedwiki_SetLocalPageArray pageSlug, forkPageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   put the result into pageJSON
   return pageJSON
end fedwiki_ActionFork


--> Fedwiki | Route
-
command fedwiki_SendWelcome socketID
   -- http://localhost:3000/view/welcome-visitors/view/local-site
   put fedwiki_GetWelcomeJSON() into someJSON
   daemon_SendText socketID, someJSON
   return the result
end fedwiki_SendWelcome

command fedwiki_SendPageJSON pageSlug, socketID  
   -- all the smarts are in the custom property handler
   put fedwiki_GetLocalOrDefaultPageJson (pageSlug) into someJSON
   if someJSON is empty then
      daemon_SendNotFound socketID
      return "Returned 404 page not found."
   else
      -- send the json file stored in the pages folder
      daemon_SendJSON socketID, someJSON
      return "Sent JSON. Socket still open."
   end if
end fedwiki_SendPageJSON


--> Fedwiki | Route | Props
-
getprop fedwiki_WelcomeHtml
   put server_GetWelcomeHtml() into welcomeHtml
   return welcomeHtml
end fedwiki_WelcomeHtml

getprop fedwiki_ListSlugs [pFedwikiDomain]
   put fedwiki_LocalPageSlugs (pFedwikiDomain) into pageSlugs
   return pageSlugs
end fedwiki_ListSlugs

getprop fedwiki_ListPages [pFedwikiDomain]
   put fedwiki_LocalSiteMapJson (pFedwikiDomain) into someJSON
   put fedwiki_SitemapIndex (someJSON) into pageTitles
   return pageTitles
end fedwiki_ListPages

getprop fedwiki_SiteMap
   put fedwiki_LocalSiteMapJson() into sitemapJSON
   return sitemapJSON
end fedwiki_SiteMap

setprop fedwiki_SiteMap sitemapJSON
   breakpoint
   fedwiki_SetLocalSiteMapJson sitemapJSON
   return the result
end fedwiki_SiteMap

getprop fedwiki_Favicon
   put fedwiki_GetLocalFavicon() into someFavicon
   return someFavicon
end fedwiki_Favicon

setprop fedwiki_Favicon sitemapJSON
   breakpoint
   fedwiki_SetLocalSiteMapJson sitemapJSON
   return the result
end fedwiki_Favicon

getprop fedwiki_PageJson [pageSlug]
   return fedwiki_GetLocalOrDefaultPageJson (pageSlug)
end fedwiki_PageJson

setprop fedwiki_PageJson [pageSlug] pageJSON
   breakpoint
   put empty into fedwikiDomain
   fedwiki_SetLocalPageJson pageSlug, fedwikiDomain, pageJSON
   return the result
end fedwiki_PageJson


--> Fedwiki | Files
-
function fedwiki_GetWelcomeJSON
   put fedwiki_GetLocalPageJson ("welcome-visitors") into someJSON
   if someJSON is empty then put daemon_GetRouteData ("welcome-visitors.json") into someJSON -- get the default
   return someJSON
end fedwiki_GetWelcomeJSON

function fedwiki_GetLocalOrDefaultPageJson pageSlug
   -- there are a few json files that have defaults for new sites, so here we add the defaults
   put fedwiki_GetLocalPageJson (pageSlug) into someJSON
   if someJSON is empty then
      put pageSlug & ".json" into shortJsonFile
      put daemon_GetRouteData (shortJsonFile) into someJSON -- get the default
   end if
   return someJSON
end fedwiki_GetLocalOrDefaultPageJson

command fedwiki_SendSiteMap socketID
   put the fedwiki_SiteMap of me into someJSON
   daemon_SendJSON socketID, someJSON
   return "Sent JSON. Socket still open."
end fedwiki_SendSiteMap

command fedwiki_SendWelcome socketID
   put the fedwiki_WelcomeHtml of me into someHtml
   daemon_SendText socketID, someHtml
   return "Returned welcome-visitors.html"
end fedwiki_SendWelcome

command fedwiki_SendHTML  shortFile, socketID
   put server_GetTextFile (shortFile) into someText
   daemon_SendText socketID, someText
   return "Sent HTML. Socket still open."
end fedwiki_SendHTML

      
--> Fedwiki | Not Needed As Custom Props?
-
command fedwiki_SendPNG shortFile, socketID, someETag
   put server_GetBinaryFile (shortFile) into someData
   daemon_SendPNG socketID, someData, someETag
   return "Sent PNG. Socket still open."
end fedwiki_SendPNG

command fedwiki_SendOriginFavicon socketID
   put the fedwiki_Favicon of me into fedwikiFavicon
   daemon_SendPNG socketID, fedwikiFavicon
   return "Sent Favicon. Socket still open."
end fedwiki_SendOriginFavicon

command fedwiki_SendCSS shortFile, socketID
   put server_GetBinaryFile (shortFile) into someJSON
   daemon_SendCSS socketID, someJSON
   return "Sent JSON. Socket still open."
end fedwiki_SendCSS

command fedwiki_SendJS shortFile, socketID
   put server_GetTextFile (shortFile) into someJSON
   daemon_SendJSON socketID, someJSON
   return "Sent JSON. Socket still open."
end fedwiki_SendJS


--> Deps | Fedwiki
-
function fedwiki_FetchLocalOrDefaultArray pageSlug
   put fedwiki_GetLocalOrDefaultPageJson (pageSlug) into pageJSON
   put json_ToArray (pageJSON) into pageArray
   return pageArray
end fedwiki_FetchLocalOrDefaultArray

command fedwiki_PageArrayEdit @pageArray, actionArray
   put actionArray ["id"] into itemID
   put fedwiki_FindStoryItemID (pageArray, itemID) into storyItemNum
   if storyItemNum < 1 then
      -- should not be able to edit an item that deos not exist
      -- but a newly created page with a factory may not have an id?
      put fedwiki_FindStoryItemID (pageArray, itemID) into storyItemNum
      put "Error: editing item" && itemID && "of page" && pageSlug & ". It does not exist" into someError
      dispatch "daemon_Log" with someError
      return someError
   end if
   
   -- update the story item
   put actionArray ["item"] into itemArray
   put itemArray into pageArray [ "story"][storyItemNum]
   
   -- update the journal
   put pageArray ["journal"] into journalArray
   fedwiki_AddToJournalArray journalArray, itemArray, "edit"
   put journalArray into pageArray ["journal"]
   
   -- if it is the first paragraph => update the site map
   -- not done yet
   
   return empty -- everything is OK
end fedwiki_PageArrayEdit

function fedwiki_FindStoryItemID pageArray, itemID
   put pageArray [ "story"] into storyArray
   repeat for each key storyNum in storyArray
      put storyArray [storyNum]["id"] into storyItemID
      if storyItemID = itemID then
         return storyNum
      end if
   end repeat
   return empty
end fedwiki_FindStoryItemID


--> Deps
-
function url_DecodePath routeIndex
   set the itemdelimiter to "/"
   repeat with itemNum = 1 to the number of items of routeIndex
      put item itemNum of routeIndex into someRoute
      put urldecode (someRoute) into item itemNum of somePath
   end repeat
   return somePath
end url_DecodePath

function url_EncodePath somePath
   replace space with "%20" in somePath
   return somePath
   
   set the itemdelimiter to "/"
   repeat with itemNum = 1 to the number of items of somePath
      put  item itemNum of somePath into pathItem
      put urlencode (pathItem) into item itemNum of somePath
   end repeat
   return somePath
end url_EncodePath
