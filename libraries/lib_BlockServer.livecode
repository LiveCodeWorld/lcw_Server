script "lib_BlockServer"
--> MetaData
-
name: lib_BlockServer
type: behavior
version: 1.0
copyright: David Bovill
licence:  GPLv3

/*
This behavior is designed to extend, the basic Livecode Server Daemon, to serve Fedwiki Files.
This behavior inherits the Livecode Daemon behavior script.
*/

--> Working on
-
private function _GetLocalOrDefaultPageJson pageSlug, wikiDomain
   breakpoint
   -- there are a few json files that have defaults for new sites, so here we add the defaults
   put pageJson_Get (wikiDomain, pageSlug) into someJSON
   if someJSON is empty then
      put pageSlug & ".json" into shortJsonFile
      put daemon_GetRouteData (shortJsonFile) into someJSON -- get the default
   end if
   return someJSON
end _GetLocalOrDefaultPageJson

command block_SendWelcome socketID
   -- http://localhost:3000/view/welcome-visitors/view/local-site
   -- put the block_WelcomeHtml of me into someHtml
   put block_GetWelcomeJSON() into someJSON
   daemon_SendText socketID, someJSON
   return the result
end block_SendWelcome

getprop block_WelcomeHtml
   put block_GetWelcomeHtml() into welcomeHtml
   return welcomeHtml
end block_WelcomeHtml

function block_GetWelcomeHtml
   put "file:" & fedwiki_GetWelcomeFile () into someUrl
   put url someUrl into welcomeHtml
   return welcomeHtml
end block_GetWelcomeHtml

function block_GetWelcomeJSON wikiDomain
   breakpoint
   put pageJson_Get (wikiDomain, "welcome-visitors") into someJSON
   if someJSON is empty then put daemon_GetRouteData ("welcome-visitors.json") into someJSON -- get the default
   return someJSON
end block_GetWelcomeJSON

private command _SetPageArray pageSlug, pageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   -- stores the pageArray as local json and updates the local site map
   put json_FromArray (pageArray) into pageJSON  
   fedwiki_SetLocalPageJson pageSlug, pageJSON, pFedwikiDomain, pLocalWikiFolder
   wikiSiteMap_UpdateFile pageArray, pFedwikiDomain, pCreateMilliSeconds
   return pageJSON
end _SetPageArray

private function _FetchLocalOrDefaultArray pageSlug
   put _GetLocalOrDefaultPageJson (pageSlug) into pageJSON
   put json_ToArray (pageJSON) into pageArray
   return pageArray
end _FetchLocalOrDefaultArray


--> Objects and Files
-
/*
These handlers fix the the behaviors of the server to use a given root to serve files
and define the stack / control used for the server, and the router.

In this case the server and router are the same control (usually a stack).
Set the behavior of a stack to this script-only-stack and we are good to go. 
*/

--> Block | Send
-
command block_SendHTML  shortFile, socketID
   put server_GetTextFile (shortFile) into someText
   daemon_SendText socketID, someText
   return "Sent HTML. Socket still open."
end block_SendHTML

command block_SendSiteMap socketID
   put the fedwiki_SiteMap of me into someJSON
   -- put fedwiki_LocalSiteMapJson() into sitemapJSON
   daemon_SendJSON socketID, someJSON
   return "Sent JSON. Socket still open."
end block_SendSiteMap


--> Fedwiki | Not Needed As Custom Props?
-
command block_SendPNG shortFile, socketID, someETag
   put server_GetBinaryFile (shortFile) into someData
   daemon_SendPNG socketID, someData, someETag
   return "Sent PNG. Socket still open."
end block_SendPNG

command block_SendOriginFavicon socketID
   put the fedwiki_Favicon of me into fedwikiFavicon
   daemon_SendPNG socketID, fedwikiFavicon
   return "Sent Favicon. Socket still open."
end block_SendOriginFavicon

command block_SendCSS shortFile, socketID
   put server_GetBinaryFile (shortFile) into someJSON
   daemon_SendCSS socketID, someJSON
   return "Sent JSON. Socket still open."
end block_SendCSS

command fedwiki_SendJS shortFile, socketID
   put server_GetTextFile (shortFile) into someJSON
   daemon_SendJSON socketID, someJSON
   return "Sent JSON. Socket still open."
end fedwiki_SendJS


--> Block | Page | Action
-
command block_DoAction actionArray, pageSlug
   put actionArray ["type"] into actionType
   switch actionType
      case "edit"
         block_ActionEdit pageSlug, actionArray
         break
      case "create"
         block_ActionCreate pageSlug, actionArray
         break
      case "add"
         block_ActionAdd pageSlug, actionArray
         break
      case "move"
         block_ActionMove pageSlug, actionArray
         break
      case "remove"
         block_ActionRemove pageSlug, actionArray
         break
      case "fork"
         block_ActionFork pageSlug, actionArray
         break
      default
         display_Array actionArray, ("New action" && actionType && pageSlug)
   end switch
   -- display_Array actionArray, actionType
end block_DoAction

command block_ActionRemove pageSlug, actionArray
   put actionArray ["id"] into itemID
   put _FetchLocalOrDefaultArray (pageSlug) into pageArray
   put pageArray ["story"] into storyArray
   put pageArray_FindItemID (itemID, pageArray) into storyItemNum
   
   -- let's delete the item and renumber
   put item 2 of the extents of storyArray into maxNum
   repeat with toMoveNum = (storyItemNum + 1) to maxNum
      put toMoveNum - 1 into previousNum
      put storyArray [toMoveNum] into storyArray [previousNum]
   end repeat
   delete variable storyArray [maxNum]
   
   -- add to journal
   put pageArray ["journal"] into journalArray
   journalArray_Add journalArray, actionArray, "remove"
   put journalArray into pageArray ["journal"]
   
   -- save to disk
   put json_FromArray (pageArray) into pageJSON  
   fedwiki_SetLocalPageJson pageSlug, pageJSON, pFedwikiDomain, pLocalWikiFolder
end block_ActionRemove

command block_ActionMove pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   put _FetchLocalOrDefaultArray (pageSlug) into pageArray
   put pageArray ["story"] into storyArray
   
   put actionArray ["order"] into orderArray
   repeat for each key orderNum in orderArray
      put orderArray [orderNum] into itemID
      put pageArray_FindItemID (itemID, pageArray) into oldStoryItemNum
      put storyArray [oldStoryItemNum] into newPageArray [orderNum]
   end repeat
   put newPageArray into pageArray ["story"]
   
   -- now add a "move" to the journal
   put pageArray ["journal"] into journalArray
   journalArray_Add journalArray, actionArray, "move"
   put journalArray into pageArray ["journal"]
   
   put actionArray ["date"] into pCreateMilliSeconds
   _SetPageArray pageSlug, pageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   return the result
end block_ActionMove

command block_ActionAdd pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   local pageArray
   
   put _FetchLocalOrDefaultArray (pageSlug) into pageArray
   
   put actionArray ["id"] into itemID
   put actionArray ["after"] into afterID
   put actionArray ["item"]["type"] into itemType
   
   switch itemType
      case "factory"
         put itemArray_ConstructFactory (itemID) into itemArray
         itemArray_Add itemArray, pageArray
         break
      default
         display_Array actionArray, ("Add undefined" && itemType)
   end switch
   
   put json_FromArray (pageArray) into pageJSON  
   fedwiki_SetLocalPageJson pageSlug, pageJSON, pFedwikiDomain, pLocalWikiFolder
   return pageArray
end block_ActionAdd

command block_ActionEdit pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   put _GetLocalOrDefaultPageJson (pageSlug) into pageJSON
   put json_ToArray (pageJSON) into pageArray
   
   --this does any type of edit specified by actionArray?
   fedwiki_PageArrayEdit pageArray, actionArray
   put the result into someError
   
   -- now we sould update the JSON file and possibly the site map
   put actionArray ["date"] into pCreateMilliSeconds
   _SetPageArray pageSlug, pageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   
   -- and maybe the site map
   return pageArray
end block_ActionEdit

command block_ActionCreate pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   -- create a blank new page
   put actionArray ["date"] into pCreateMilliSeconds
   put actionArray ["item"]["title"] into pageTitle
   
   -- put pageArray_Construct (pageTitle) into pageArray 
   put pageTitle into pageArray ["title"]  
   put actionArray into pageArray ["journal"][1]
   
   _SetPageArray pageSlug, pageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   return pageArray
end block_ActionCreate

command block_ActionFork pageSlug, actionArray, pFedwikiDomain, pLocalWikiFolder
   -- create a blank new page
   put actionArray ["date"] into pCreateMilliSeconds
   put actionArray ["item"] into forkPageArray
   put forkPageArray ["title"] into pageTitle
   
   put fedwiki_ConstructSlug (pageTitle) into pageSlug
   _SetPageArray pageSlug, forkPageArray, pFedwikiDomain, pLocalWikiFolder, pCreateMilliSeconds
   put the result into pageJSON
   return pageJSON
end block_ActionFork


--> Fedwiki | Route
-
command block_SendPageJSON pageSlug, socketID  
   -- all the smarts are in the custom property handler
   put _GetLocalOrDefaultPageJson (pageSlug) into someJSON
   if someJSON is empty then
      daemon_SendNotFound socketID
      return "Returned 404 page not found."
   else
      -- send the json file stored in the pages folder
      daemon_SendJSON socketID, someJSON
      return "Sent JSON. Socket still open."
   end if
end block_SendPageJSON


--> Daemon | RouteMetaArray | Model
-
/*
Stores metadata, and raw data in a custom property.
Altering the custom proerty handler can stor the data externally.

All the data can be copied from Firefox pull down items in the webdeveloper tools
Control-click on the network menu tab item for the relevant request and copy the url or curl command. 
*/

-- function daemon_GetCurlCommand someRoute  
put "/curl" after someRoute
put daemon_GetRouteValue (curlRoute) into someShell
return someShell
end daemon_GetCurlCommand

-- command daemon_SetCurlCommand someRoute, someShell
put "/curl" after someRoute
daemon_SetRouteValue someRoute, someShell
return the result
end daemon_SetCurlCommand

function daemon_GetExampleUrl someRoute
   put "/example url" after someRoute
   put daemon_GetRouteValue (someRoute) into routeData
   return routeData
end daemon_GetExampleUrl

command daemon_SetExampleUrl someRoute, someUrl
   put "/example url" after someRoute
   daemon_SetRouteValue someRoute, someUrl
   return the result
end daemon_SetExampleUrl

function daemon_GetRouteData someRoute
   put "/data" after someRoute
   put daemon_GetRouteValue (someRoute) into routeData
   return routeData
end daemon_GetRouteData

command daemon_SetRouteData someRoute, routeData
   put "/data" after someRoute
   daemon_SetRouteValue someRoute, routeData
   return the result
end daemon_SetRouteData

function daemon_GetRouteContentType someRoute
   put daemon_GetRouteHeaderArray (someRoute) into headerArray
   put headerArray ["Content-Type"] into contentType
   return contentType
end daemon_GetRouteContentType

command daemon_SetRouteContentType someRoute, contentType
   put daemon_GetRouteHeaderArray (someRoute) into headerArray
   put contentType into headerArray ["Content-Type"] 
   daemon_SetRouteHeaderArray someRoute, headerArray
   return the result
end daemon_SetRouteContentType

function daemon_GetRouteHeaderArray someRoute
   put "/headers" after someRoute
   put daemon_GetRouteValue (someRoute) into headerArray
   return headerArray
end daemon_GetRouteHeaderArray

command daemon_SetRouteHeaderArray someRoute, headerArray
   put "/headers" after someRoute
   daemon_SetRouteValue someRoute, headerArray
   return the result
end daemon_SetRouteHeaderArray

command daemon_RouteMetadata someRoute, @someData, @headerArray
   put daemon_GetRouteValue (someRoute) into routeData
   put routeData ["data"] into someData
   put routeData ["headers"] into headerArray
end daemon_RouteMetadata

function daemon_GetRouteValue someRoute
   -- can be an array or an end value depending on the route
   put the daemon_RouteMetaArray of me into routeMetaArray
   put daemon_ConstructArrayKey (someRoute) into routeArrayKey
   put routeMetaArray [routeArrayKey] into someValue
   return someValue
end daemon_GetRouteValue

command daemon_SetRouteValue someRoute, someValue
   -- can be an array or an end value depending on the route
   put the daemon_RouteMetaArray of me into routeMetaArray
   put daemon_ConstructArrayKey (someRoute) into routeArrayKey
   put someValue into routeMetaArray [routeArrayKey]
   set the daemon_RouteMetaArray of me to routeMetaArray
   return routeMetaArray
end daemon_SetRouteValue

command daemon_DeleteRouteArray someRoute
   -- can be an array or an end value depending on the route
   put the daemon_RouteMetaArray of me into routeMetaArray
   put daemon_ConstructArrayKey (someRoute) into routeArrayKey
   delete variable routeMetaArray [routeArrayKey]
   set the daemon_RouteMetaArray of me to routeMetaArray
   return routeMetaArray
end daemon_DeleteRouteArray

function daemon_ConstructArrayKey someRoute
   put someRoute into routeArrayKey
   if char 1 of someRoute = "/" then delete char 1 of routeArrayKey
   split routeArrayKey with "/"
   return routeArrayKey
end daemon_ConstructArrayKey

function daemon_GuessContentType someRoute
   set the itemdelimiter to "."
   put item - 1 of someRoute into someFileExtension
   switch
      case someFileExtension = "png"
         return "image/png"
      case someFileExtension is among the items of "js.json"
         return "application/json; charset=utf-8"
      case someFileExtension = "css"
         return "text/css; charset=UTF-8"
      case someFileExtension is among the items of "txt.html.htm"
         return "text/html"
      default
         return empty
   end switch
end daemon_GuessContentType


--> Fedwiki | Route | Props
-
getprop fedwiki_ListSlugs [pFedwikiDomain]
   put wiki_ListPages (pFedwikiDomain) into pageSlugs
   return pageSlugs
end fedwiki_ListSlugs

getprop fedwiki_ListPages [pFedwikiDomain]
   put fedwiki_LocalSiteMapJson (pFedwikiDomain) into someJSON
   put wikiSiteMap_ListPageTitles (someJSON) into pageTitles
   return pageTitles
end fedwiki_ListPages

getprop fedwiki_SiteMap
   put fedwiki_LocalSiteMapJson() into sitemapJSON
   return sitemapJSON
end fedwiki_SiteMap

setprop fedwiki_SiteMap sitemapJSON
   breakpoint
   wikiJson_SetJson sitemapJSON
   return the result
end fedwiki_SiteMap

getprop fedwiki_Favicon
   breakpoint
   put wiki_GetFavicon() into someFavicon
   return someFavicon
end fedwiki_Favicon

setprop fedwiki_Favicon sitemapJSON
   breakpoint
   wikiJson_SetJson sitemapJSON
   return the result
end fedwiki_Favicon

getprop fedwiki_PageJson [pageSlug]
   return _GetLocalOrDefaultPageJson (pageSlug)
end fedwiki_PageJson

setprop fedwiki_PageJson [pageSlug] pageJSON
   breakpoint
   put empty into fedwikiDomain
   fedwiki_SetLocalPageJson pageSlug, fedwikiDomain, pageJSON
   return the result
end fedwiki_PageJson


--> Deps | Fedwiki
-
command wikiJson_SetJson sitemapJSON, pWikiDomain
   put wikiFile_ConstructSiteMap (pWikiDomain) into siteMapFile
   json_Set siteMapFile, sitemapJSON
   return siteMapFile
end wikiJson_SetJson

command fedwiki_PageArrayEdit @pageArray, actionArray
   put actionArray ["id"] into itemID
   put pageArray_FindItemID (itemID, pageArray) into storyItemNum
   if storyItemNum < 1 then
      -- should not be able to edit an item that deos not exist
      -- but a newly created page with a factory may not have an id?
      put pageArray_FindItemID (itemID, pageArray) into storyItemNum
      put "Error: editing item" && itemID && "of page" && pageSlug & ". It does not exist" into someError
      dispatch "daemon_Log" with someError
      return someError
   end if
   
   -- update the story item
   put actionArray ["item"] into itemArray
   put itemArray into pageArray [ "story"][storyItemNum]
   
   -- update the journal
   put pageArray ["journal"] into journalArray
   journalArray_Add journalArray, itemArray, "edit"
   put journalArray into pageArray ["journal"]
   
   -- if it is the first paragraph => update the site map
   -- not done yet
   
   return empty -- everything is OK
end fedwiki_PageArrayEdit


--> Deps
-
function url_DecodePath routeIndex
   set the itemdelimiter to "/"
   repeat with itemNum = 1 to the number of items of routeIndex
      put item itemNum of routeIndex into someRoute
      put urldecode (someRoute) into item itemNum of somePath
   end repeat
   return somePath
end url_DecodePath

function url_EncodePath somePath
   replace space with "%20" in somePath
   return somePath
   
   set the itemdelimiter to "/"
   repeat with itemNum = 1 to the number of items of somePath
      put  item itemNum of somePath into pathItem
      put urlencode (pathItem) into item itemNum of somePath
   end repeat
   return somePath
end url_EncodePath
