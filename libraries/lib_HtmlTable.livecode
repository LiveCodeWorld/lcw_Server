script "lib_HtmlTable"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_HtmlTable
type: script library
version: 0.1

/*
Here we look to produce a minimal but effective library for creating and parsing HTML tables.
*/

--> Declare Variables
-
local sRows, sHeading, sAutoHeading, sCaption, sTemplate, sNewline, sEmptyCells

put TRUE into sAutoHeading
put return into sNewline


--> Working On
-
command test_Table
   put "Name" into tData[1][1]
   put "Color" into tData[1][2]
   put "Size" into tData[1][3]
   
   put "Fred" into tData[2][1]
   put "Blue" into tData[2][2]
   put "Small" into tData[2][3]
   
   put "Mary" into tData[3][1]
   put "Red" into tData[3][2]
   put "Large" into tData[3][3]
   
   put "John" into tData[4][1]
   put "Green" into tData[4][2]
   put "Medium" into tData[4][3]
   
   put table_ConstructOpenTag (1, 2, 1, "mytable") into openTag
   table_SetTemplateOpeningTag openTag
   
   put table_Construct (tData) into tableHTML
   
   html_Tidy tableHTML
   put tableHTML
end test_Table

function table_ConstructArrayFromTree xmlID, tableNode
   local tableArray
   
   -- parse the table header
   put tableNode & "/thead" into theadNode
   table_ParseSection tableArray, xmlID, theadNode, "theader"
   
   
   -- parse the table body
   put tableNode & "/tbody" into tbodyNode
   table_ParseSection tableArray, xmlID, tbodyNode, "tbody"
   
   /*
   put revXMLChildNames (xmlID, tbodyNode, CR, "tr", true) into childNames
   put the number of lines of childNames into maxChildNum
   repeat with lineNum = 1 to maxChildNum
      put tbodyNode & "/" & line lineNum of childNames into childNode
      put "/td/p" after childNode
      get revXMLNodeContents (xmlID, childNode)
      put it into tableArray ["tbody"][lineNum]
   end repeat
   */
   
   -- should do footer as well
   
   return tableArray
end table_ConstructArrayFromTree

private command table_ParseSection @tableArray, xmlID, theadNode, sectionName
   put revXMLChildNames (xmlID, theadNode, CR, "tr", true) into rowNames
   put the number of lines of rowNames into maxRowNum
   repeat with rowNum = 1 to maxRowNum
      put theadNode & "/" & line rowNum of rowNames into rowNode
      
      put revXMLChildNames (xmlID, rowNode, CR, "td", true) into columnNames
      put the number of lines of columnNames into maxColumnNum
      repeat with columnNum = 1 to maxColumnNum
         put rowNode & "/" & line columnNum of columnNames into columnNode
         
         -- a custom bit that assumes the entry is wrapped in <p>
         put columnNode & "/p" into childNode
         get revXMLNodeContents (xmlID, childNode)
         
         put word 1 to -1 of it into tableArray [sectionName][rowNum][columnNum]
      end repeat
   end repeat
end table_ParseSection


--> Table | Construct
-
function table_ConstructHeader headerTable
   put line 1 of headerTable into headerLine
   put line 2 of headerTable into abbreviationLine
   
   put "<thead>" into tableHeader
   put CR & tab & "<tr>" after tableHeader
   --
   set the itemdelimiter to tab
   repeat with columnNum = 1 to the number of items of headerLine
      put "col" & columnNum into columnLabel
      put item columnNum of headerLine into someValue
      put word 1 to -1 of someValue into someValue
      
      put item columnNum of abbreviationLine into columnAbbrev
      put word 1 to -1 of columnAbbrev into columnAbbrev
      if columnAbbrev is empty then
         get xml_Tag(someValue, "th", "id", columnLabel)
      else
         get xml_Tag(someValue, "th", "id", columnLabel, "abbr", columnAbbrev)
      end if
      put CR & tab & tab & it after tableHeader
   end repeat
   --
   put CR & tab & "</tr>" after tableHeader
   put CR & "</thead>" after tableHeader
   return tableHeader
end table_ConstructHeader


--> Table | Construct | From Tabs
-
function table_ConstructBody tabTable
   -- should be modified to use tabs or commas, or array?
   -- see also "table_Construct"
   
   put "<tbody>" into htmlTable
   --
   set the itemdelimiter to tab
   repeat with rowNum = 1 to the number of lines of tabTable
      put "row" & rowNum into rowLabel
      put CR & tab & "<tr>" after htmlTable
      
      -- first row "header" tag
      put line rowNum of tabTable into someLine
      put item 1 of someLine into someKey
      get xml_Tag(someKey, "th", "id", rowLabel)
      put CR & tab & tab & it after htmlTable
      
      -- repeat for the "body" tags
      repeat with columnNum = 2 to the number of items of someLine
         put item columnNum of someLine into someValue
         put word 1 to -1 of someValue into someValue
         
         put "col" & columnNum into columnLabel
         put columnLabel && rowLabel into headerLabel
         get xml_Tag(someValue, "td", "headers", headerLabel)
         put CR & tab & tab & it after htmlTable
      end repeat
      --
      put CR & tab & "</tr>" after htmlTable
   end repeat
   --
   put CR & "</tbody>" after htmlTable
   return htmlTable
end table_ConstructBody


--> Table | xHTML
-
/*
The handlers use Livecodes XML features to process tables. 
*/

function table_Extract xHtml, pStartNode
   put revCreateXMLTree (xHtml, true, true, false) into xmlID
   put table_ExtractFromXmlID (xmlID, pStartNode) into someXML
   revDeleteXmlTree xmlID
   return someXML
end table_Extract

function table_ExtractFromXmlID xmlID, pStartNode
   if pStartNode is empty then put revXMLRootNode(xmlID) into pStartNode
   
   put revXMLChildNames (xmlID, pStartNode, CR, "table", true) into childNames
   -- put revXMLMatchingNode (xmlID, pStartNode, "table", "border", "2", -1) into foundNode
   if childNames is empty then
      put empty into someXML
   else
      put pStartNode & "/" & line 1 of childNames into foundNode
      put revXMLText (xmlID, foundNode, true) into someXML
   end if
   return someXML
end table_ExtractFromXmlID


--> Table | From revIgniter
-
function table_Construct pTableData
   -- was "rigGenerateTable"
   -- Requires: _setTableData, _compileTemplate, array_IsNumbered()
   
   if pTableData is not an array then
      return FALSE
   end if
   
   if (sHeading is not an array) and (sAutoHeading is FALSE) then
      put FALSE into tSetHeading
   else
      put TRUE into tSetHeading
   end if
   _setTableData pTableData, tSetHeading
   
   # IS THERE ANYTHING TO DISPLAY?  NO?  SMITE THEM!
   if (sHeading is not an array) and (sRows is not an array) then
      return "Undefined table data"
   end if
   
   # COMPILE AND VALIDATE THE TEMPLATE DATA
   _compileTemplate
   	
   # BUILD THE TABLE!
   put sTemplate ["tableOpen"] into tableHTML
   put tableHTML & sNewline into tableHTML
   
   # ADD ANY CAPTION HERE
   if sCaption is not empty then
      put tableHTML & sNewline into tableHTML
      put tableHTML & "<caption>" & sCaption & "</caption>" into tableHTML
      put tableHTML & sNewline into tableHTML
   end if
   
   # IS THERE A TABLE HEADING TO DISPLAY?
   if sHeading is an array then
      put tableHTML & sTemplate ["headingRowStart"] into tableHTML
      put tableHTML & sNewline into tableHTML
      
      # CHECK IF ARRAY IS NUMBERED CONSECUTIVELY
      put TRUE into tHeadingNumberedConsecutive
      put array_IsNumbered (sHeading, tHeadingNumberedConsecutive) into tHeadingArrayInfo
      
      put item 1 of tHeadingArrayInfo into tHeadingNumbered
      		
      if tHeadingNumbered is TRUE then
         # USE VALUE OF FIRST LINE OF ARRAY KEYS AS STARTING NUMBER
         put item 2 of tHeadingArrayInfo into tCounter
      else
         put 1 into tCounter
      end if
      		
      repeat for each key tKey in sHeading
         if tHeadingNumbered is TRUE then
            put tCounter into tKey
         end if
         
         put tableHTML & sTemplate ["headingCellStart"] into tableHTML
         put tableHTML & sHeading [tKey] into tableHTML
         put tableHTML & sTemplate ["headingCellEnd"] into tableHTML
         			
         add 1 to tCounter
      end repeat
      
      put tableHTML & sTemplate ["headingRowEnd"] into tableHTML
      put tableHTML & sNewline into tableHTML
   end if
   
   # BUILD THE TABLE ROWS
   if sRows is an array then
      # CHECK IF ARRAY IS NUMBERED CONSECUTIVELY
      put TRUE into tConsecutive
      put array_IsNumbered (sRows, tConsecutive) into tArrayInfo
      
      put item 1 of tArrayInfo into tNumbered
      
      if tNumbered is TRUE then
         # USE VALUE OF FIRST LINE OF ARRAY KEYS AS STARTING NUMBER
         put item 2 of tArrayInfo into tCounter
      else
         put 1 into tCounter
      end if
      
      repeat for each key tKey in sRows
         if tNumbered is TRUE then
            put tCounter into tKey
         end if
         
         if sRows [tKey] is not an array then
            exit repeat
         end if
         
         # WE USE MODULUS TO ALTERNATE THE ROW COLORS
         add 1 to tCounter
         if tCounter mod 2 = 0 then
            put "" into tName
         else
            put "Alt" into tName
         end if
         
         put "row" & tName & "Start" into tTemplateKey
         put tableHTML & sTemplate [tTemplateKey] into tableHTML
         put tableHTML & sNewline into tableHTML
         
         # CHECK IF ARRAY IS NUMBERED CONSECUTIVELY
         put TRUE into tRowNumberedConsecutive
         put array_IsNumbered (sRows, tRowNumberedConsecutive) into tRowArrayInfo
         
         put item 1 of tRowArrayInfo into tRowNumbered
         
         if tRowNumbered is TRUE then
            # USE VALUE OF FIRST LINE OF ARRAY KEYS AS STARTING NUMBER
            put item 2 of tRowArrayInfo into tRowCounter
         else
            put 1 into tRowCounter
         end if
         
         repeat for each key tCellKey in sRows [tKey]
            if tRowNumbered is TRUE then
               put tRowCounter into tCellKey
            end if
            
            put "cell" & tName & "Start" into tTemplateKey
            put tableHTML & sTemplate [tTemplateKey] into tableHTML
            
            if sRows [tKey][tCellKey] is empty then
               put tableHTML & sEmptyCells into tableHTML
            else
               put tableHTML & sRows [tKey][tCellKey] into tableHTML
            end if
            
            put "cell" & tName & "End" into tTemplateKey
            put tableHTML & sTemplate [tTemplateKey] into tableHTML
            
            add 1 to tRowCounter
         end repeat
         		
         put "row" & tName & "End" into tTemplateKey
         put tableHTML & sTemplate [tTemplateKey] into tableHTML
         put tableHTML & sNewline into tableHTML
      end repeat
   end if
   put tableHTML & sTemplate ["tableClose"] into tableHTML
   return tableHTML
end table_Construct


--> Table | Rows and Columns
-
command table_AddRow pRow
   -- was "rigAddTableRow"
   -- Add a table row.
   -- Can be passed as an array or a string of comma separated params.
   
   put pRow into tRow
   if tRow is not an array then
      split tRow using comma
   end if
   if sRows is an array then
      put (the number of lines in the keys of sRows + 1) into tKeyNum
      put tRow into sRows[tKeyNum]
   else
      put tRow into sRows[1]
   end if
end table_AddRow

function table_MakeColumns pArray, pColLimit
   -- Set columns.  Takes a one-dimensional array as input and creates
   -- a multi-dimensional array with a depth equal to the number of
   -- columns.  This allows a single array with many elements to  be
   -- displayed in a table that has a fixed column count.
   
   -- deps "rigArraySplice from rigLoadHelper "array"
   
   if pArray is not an array then
      return FALSE
   else
      put pArray into tArray
   end if
   
   if (pColLimit is empty) or (pColLimit is not an integer) then
      put 0 into tColLimit
   else
      put pColLimit into tColLimit
   end if
   
   # TURN OFF THE AUTO-HEADING FEATURE SINCE IT'S DOUBTFUL WE 
   # WILL WANT HEADINGS FROM A ONE-DIMENSIONAL ARRAY
   put FALSE into sAutoHeading
   
   if tColLimit = 0 then
      return tArray
   end if
   
   put the number of lines in the keys of tArray into tKeysNum
   put 0 into tCounter  
   put 0 into tOffset
    
   repeat while tKeysNum > tOffset
      add 1 to tCounter
      
      put rigArraySplice (tArray, tOffset, tColLimit) into tTempArray
      
      put the number of lines in the keys of tTempArray into tTempKeysNum
      
      # ADD NONE BREAKING SPACES 
      if tTempKeysNum < tColLimit then
         put tTempKeysNum + 1 into tKeyNum
         repeat with i = tTempKeysNum to (tColLimit -1)
            put "&nbsp;" into tTempArray [tKeyNum]
            add 1 to tKeyNum
         end repeat
      end if
      
      put tTempArray into tNewArray [tCounter]
      add tColLimit to tOffset
   end repeat
   return tNewArray
end table_MakeColumns


--> Table | Template | Construct
-
/*
Table template is an array stored in the local variable "sTemplate".

The handlers below let you construct, build your own custom templates.
You then need to "set" the template with the "table_SetTemplate" handler.
*/

function table_ConstructOpenTag pBorderWidth, pCellPadding, pCellSpacing, pTableClass
   -- put table_ConstructOpenTag (1, 2, 1, "mytable") into tableTemplateArray ["tableOpen"]
   
   put "<table" into openTag
   if pBorderWidth is a number then put space & "border=" & quote & pBorderWidth & quote after openTag
   if pCellPadding is a number then put space & "cellpadding=" & quote & pCellPadding & quote after openTag
   if pCellSpacing is a number then put space & "cellspacing=" & quote & pCellSpacing & quote after openTag
   if pTableClass is not empty then put space & "class=" & quote & pTableClass & quote after openTag
   put ">" after openTag
   return openTag   
end table_ConstructOpenTag

command table_SetTemplateOpeningTag openTag
   put openTag into tableTemplateArray ["tableOpen"]
   table_SetTemplate tableTemplateArray
end table_SetTemplateOpeningTag

command table_SetTemplate pTemplate
   -- a utility to set the local variable that holds the table template
   if pTemplate is not an array then
      delete variable sTemplate
      return "deleted sTemplate"
   end if
   put pTemplate into sTemplate
   return "set sTemplate"
end table_SetTemplate

function table_DefaultTemplate
   -- this handler generates a default table template
   -- examine this handler to see how to construct or modify your own templates
   
   put "<table border=" & quote & "0" & quote && "cellpadding=" & quote & "4" & quote && "cellspacing=" & quote & "0" & quote && ">" into tableTemplateArray ["tableOpen"]
   
   put "<tr>" into tableTemplateArray ["headingRowStart"]
   put "</tr>" into tableTemplateArray ["headingRowEnd"]
   put "<th>" into tableTemplateArray ["headingCellStart"]
   put "</th>" into tableTemplateArray ["headingCellEnd"]
   
   put "<tr>" into tableTemplateArray ["rowStart"]
   put "</tr>" into tableTemplateArray ["rowEnd"]
   put "<td>" into tableTemplateArray ["cellStart"]
   put "</td>" into tableTemplateArray ["cellEnd"]
   
   put "<tr>" into tableTemplateArray ["rowAltStart"]
   put "</tr>" into tableTemplateArray ["rowAltEnd"]
   put "<td>" into tableTemplateArray ["cellAltStart"]
   put "</td>" into tableTemplateArray ["cellAltEnd"]
   	
   put "</table>" into tableTemplateArray ["tableClose"]
   
   return tableTemplateArray
end table_DefaultTemplate


--> Table | Heading
-
command table_SetHeading pHeading pFirstUpper
   -- Set the table heading.
   -- Can be passed as an array or a string of comma separated params.
   
   put pHeading into sHeading
   if sHeading is not an array then
      split sHeading using comma
   end if
   if pFirstUpper is TRUE then
      repeat for each key tKey in sHeading
         put rigUcwords (sHeading [tKey]) into sHeading [tKey]
      end repeat
   end if
end table_SetHeading

command table_SetEmptyCellDefault pValue
   -- Set "empty" cells. Set a default value for use in any table cells that are empty.
   put pValue into sEmptyCells
end table_SetEmptyCellDefault

command table_ClearVars
   -- Clears the table arrays.  Useful if multiple tables are being generated.
   put empty into sRows
   put empty into sHeading
   put TRUE into sAutoHeading
end table_ClearVars


--> Private | Table
-
private command _compileTemplate pTemplateArray
   -- combine the values you may have added to sTemplate with the default table
   
   if pTemplateArray is an array then
      put pTemplateArray into sTemplate
   else if sTemplate is not an array then
      -- first time, or if the user has not otherwise set custom option by adding something to sTemplate
      -- let's just use the default template
      put table_DefaultTemplate() into sTemplate
      return "initialised with default"
   end if
   
   put table_DefaultTemplate() into tableTemplateArray
   union sTemplate with tableTemplateArray
   return "combined custom sTemplate with default template"
   
   /*
   -- old revIgnitor code (better to use union DTB)
   
   put "tableOpen,headingRowStart,headingRowEnd,headingCellStart,headingCellEnd,rowStart,rowEnd,cellStart,cellEnd,rowAltStart,rowAltEnd,cellAltStart,cellAltEnd,tableClose" into tKeys
   repeat for each item tKey in tKeys
      if sTemplate [tKey] is empty then
         put tableTemplateArray [tKey] into sTemplate [tKey]
      end if
   end repeat
   */
end _compileTemplate

private command _setTableData pData, pSetHeading
   -- was "_rigSetTableData"
   -- deps:  array_IsNumbered
   
   if pSetHeading is empty then
      put TRUE into tSetHeading
   else
      put pSetHeading into tSetHeading
   end if
   
   if pData is not an array then
      return FALSE
   end if
   
   # CHECK IF ARRAY IS NUMBERED CONSECUTIVELY
   put TRUE into tConsecutive
   put array_IsNumbered (sRows, tConsecutive) into tArrayInfo
   
   put item 1 of tArrayInfo into tNumbered
   put 1 into tCounter
   	
   repeat for each key tKey in pData
      if tNumbered is TRUE then
         put tCounter into tKey
      end if
      
      if pData [tKey] is not an array then
         if sRows is an array then
            put (the number of lines in the keys of sRows) + 1 into tKeyNum
            put pData into sRows [tKeyNum]
         else
            put pData into sRows [1]
         end if
      end if
      	
      # IF A HEADING HASN'T ALREADY BEEN SET WE'LL USE THE FIRST ROW OF THE ARRAY AS THE HEADING
      if (tCounter = 1) and (the number of lines in the keys of pData > 1) and (sHeading is not an array) and (tSetHeading is TRUE) then
         put pData [tKey] into sHeading
      else
         if sRows is an array then
            put (the number of lines in the keys of sRows) + 1 into tKeyNum
            put pData [tKey] into sRows [tKeyNum]
         else
            put pData [tKey] into sRows [1]
         end if
      end if
      
      add 1 to tCounter
   end repeat
end _setTableData


--> Table | Junk
-
-- function table_ToTabbed xmlID, tableNode
if char -1 of tableNode is "/" then delete char -1 of tableNode

breakpoint
put tableNode & "/tbody/" into bodyNode
put xml_TreeChildNodes(xmlID, bodyNode, "tr", true) into trNodes
if trNodes is not empty then
   put tableNode & "/thead/tr/" into headNode
   put xml_TreeChildNodes(xmlID, headNode, "th", true) into thNodes
else
   put xml_TreeChildNodes(xmlID, tableNode, "th", true) into thNodes
   put xml_TreeChildNodes(xmlID, tableNode, "tr", true) into trNodes
end if

if thNodes is not empty then put xml_TreeNodeValues(xmlID, thNodes, tab) & CR into tabTable

repeat for each line trNode in trNodes
   put xml_TreeChildNodeContents(xmlID, trNode, "td", tab) into tableLine
   put tableLine & CR after tabTable
end repeat
delete char -1 of tabTable
return tabTable
end table_ToTabbed

-- private function html_TableToTabbedUtil innerTableNode
put revXMLChildNames(xmlID, innerTableNode, CR, "tr", true) into rowNames
repeat f or each line rowName in rowNames
   put empty into tabTableLine
   put innerTableNode & rowName into rowNode
   
   put revXMLChildNames(xmlID, rowNode, CR, "td", true) into itemTagNames
   repeat for each line itemTagName in itemTagNames
      put rowNode & "/" & itemTagName into itemNode
      put revXMLNodeContents(xmlID, itemNode) into itemValue
      put itemValue & tab after tabTableLine
   end repeat
   delete char -1 of tabTableLine
   if tabTableLine is empty then next repeat
   
   put tabTableLine & CR after tabTable
end repeat
delete char -1 of tabTable

put revXMLChildNames(xmlID, rowNode, CR, "th", true) into itemTagNames
repeat for each line itemTagName in itemTagNames
   put rowNode & "/" & itemTagName into itemNode
   put revXMLNodeContents(xmlID, itemNode) into itemValue
   put itemValue & tab after tabTableLine
end repeat
delete char -1 of tabTableLine
end html_TableToTabbedUtil
