script "lib_DaemonLog"
--> MetaData
-
name: lib_DaemonLog
version: 0.3
copyright: David Bovill
licence:  GPLv3

/*
This stack contains handlers to log LiveDaemon server events.

We can neatly add or remove logging these events by adding or removing this script from the behavior chain.
This keeps the lib_Daemon serve scripts clean and minimal.
You can also speeds up the server by removing all the logging with one command and no ifs.
*/

local LiveLogging
local LogView


--> Daemon | Log | Objects
-
/*
This default allows you to specify which view you would like to use for logging.
It is often over-ridden by using a fixed "getprop log_View" in the server stack instance.
*/

getprop log_View
   return LogView
end log_View

setprop log_View pControl
   if exists (pControl) then
      put pControl into LogView
      return LogView
   else
      put empty into LogView
      return empty
   end if
end log_View


--> Daemon | Log | lib_DaemonRouter
-
/*
These handlers wrap similar handlers in lib_Daemon to add logging to them.
It requires this stack to be set as a behavior of lib_Daemon.
*/


--> Daemon | Log | lib_DaemonRouter
-
/*
These handlers wrap similar handlers in lib_Daemon to add logging to them.
It requires this stack to be set as a behavior of lib_Daemon.
*/


--> Daemon | Logging | lib_Daemon
-
/*
These handlers wrap similar handlers in lib_Daemon to add logging to them.
It requires this stack to be set as a behavior of lib_Daemon.
*/

--> Damon | Log
-
command daemon_Log logLine, pDisplayNow, pLogName
   -- a wrapper to make dispatchinglog request safe
   -- needs to be in the lib_Daemon server stack, in the case that there is no handler of library present
   if pLogName is empty then put the live_Logging of me into displayLogNow

   put the log_View of me into logView
   if exists (logView) then
      dispatch "log_SetTimeStampEntry" to logView with logLine,pLogName
      put the result into theResult
      switch it
         case "handled"
            -- the message was handled and not passed
            if displayLogNow is true then
               dispatch "display_ServerLog" to logView
            end if
            return theResult
         case "unhandled"
            -- no matching handlers were found
            break
         case "passed"
            -- the message was handled but passed by all handlers
            break
      end switch
   end if
end daemon_Log

command daemon_LogUnRouted requestArray, pLogLine
   switch
      case requestArray = "delete"
         daemon_DeleteLogArray
         break
      case requestArray = "start"
         daemon_DeleteLogArray
         break
      case requestArray = "stop"
         daemon_DisplayLogArray
         break
      case requestArray is an array
         daemon_AddRequestToLogArray requestArray
         if  pLogLine is not empty then
            daemon_Log pLogLine
         end if
         break
   end switch
end daemon_LogUnRouted


--> Daemon | Log | Props
-
getprop live_Logging
   return LiveLogging is true
end live_Logging

setprop live_Logging someBoolean
   put someBoolean is true into LiveLogging
   return return
end live_Logging


--> Daemon | Log | Display
-
command daemon_DisplayLogArray
   put daemon_FetchLogArray() into logArray
   display_Array logArray, "daemon_DisplayLogArray", "Global | Daemon | Log | Menu", "Global | Daemon | Log | Line | Menu"
end daemon_DisplayLogArray

command daemon_AddRequestToLogArray requestArray
   put daemon_FetchLogArray() into dataArray
   put item 2 of the extents of dataArray + 1 into indexNum
   put requestArray into dataArray [indexNum]
   daemon_StoreLogArray dataArray
end daemon_AddRequestToLogArray

function daemon_FetchLogArray
   put server_LogArrayFile() into someFile
   put array_Fetch (someFile) into dataArray
   return dataArray
end daemon_FetchLogArray

command daemon_StoreLogArray dataArray
   put server_LogArrayFile() into someFile
   array_Save someFile, dataArray
   return someFile
end daemon_StoreLogArray

command daemon_DeleteLogArray
   put server_LogArrayFile() into someFile
   delete file someFile
   return someFile
end daemon_DeleteLogArray

function server_LogArrayFile
   put server_GetRootFolder() & "log.array" into someFile
   return someFile
end server_LogArrayFile
