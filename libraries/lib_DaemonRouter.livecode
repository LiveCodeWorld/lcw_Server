script "lib_DaemonRouter"
--> MetaData
-
name: lib_DaemonRouter
type: behavior
version: 0.8
copyright: David Bovill
licence:  GPLv3

local AvoidLoopingHack


/*
This script is designed to be a behavior for a Live Daemon server.

It should be a default behavior, which allowsa single server script to do all the routing it needs in a few lines.
At the moment it's kind of vague and more of a "script templet" you can fork, and use as a basis to create your own router.

In this version we keep it simple and use the hierarchy and getprop / setprop handlers
Invent your own complex routing by combining scripts and routing objects 
Simply replace this routing library with one you role yourself
*/

-- getprop daemon_Router
return the long id of me
end daemon_Router


--> Route | Logic
-
command daemon_RouteRequest requestArray
   -- this is the core handler that lib_Daemon dispatches
   set the itemdelimiter to "/"
   request_DeconstructArray requestArray, socketID, someMethod, someRoute, queryString, requestUrl
   switch someMethod
      case "GET"
         process_GET someRoute, socketID, requestArray
         break
      case "POST"
         process_POST someRoute, socketID, requestArray
         break
      case "PUT"
         process_PUT someRoute, socketID, requestArray
         break
      case "DELETE"
         process_DELETE someRoute, socketID, requestArray
         break
   end switch
end daemon_RouteRequest


--> Process | GET
-
command process_GET someRoute, socketID, requestArray
   put daemon_GetRouteHeaderArray (someRoute) into headerArray
   set the itemdelimiter to "/"
   switch
      case someRoute ends with "tool.json"
         put item -1 of someRoute into pageSlug
         delete char -5 to -1 of pageSlug
         -- put fedwiki_GetLocalPageArray (pageSlug) into localPageArray
         
         put "A particular tool goes here:" into someComment
         put fedwiki_ConstructNewPageArray ("Hello", someComment) into pageArray
         
         put "* [[Test Tool]]" into someMarkdown
         put CR & "* [[Another Tool]]" after someMarkdown
         fedwiki_AddMarkdownToPageArray pageArray, someMarkdown
         
         put library_FetchHandler ("process_Get,c") into someCode
         fedwiki_AddCodeToPageArray pageArray, someCode
         
         put json_FromArray (pageArray) into someJSON
         daemon_SendJSON socketID, someJSON
         return the result
      case someRoute = "tools-index.json"
         put "An nice tool index goes here:" into someComment
         put fedwiki_ConstructNewPageArray ("Tools Index", someComment) into pageArray
         
         put "* [[Test Tool]]" into someMarkdown
         put CR & "* [[Another Tool]]" after someMarkdown
         
         fedwiki_AddMarkdownToPageArray pageArray, someMarkdown
         
         put json_FromArray (pageArray) into someJSON
         daemon_SendJSON socketID, someJSON
         return the result
      case someRoute = "/hello.json"
         put "This is a test of Hello World. At round about" into someComment
         put the time after someComment
         put fedwiki_ConstructNewPageArray ("Hello", someComment) into someArray
         put json_FromArray (someArray) into someJSON
         daemon_SendJSON socketID, someJSON
         return the result
      case someRoute = "/" or someRoute begins with "/view/welcome-visitors"
         put daemon_GetRouteData ("/view/welcome-visitors") into someHTML
         daemon_SendText socketID, someHTML
         return "Sent HTML. Socket still open."
      case someRoute = "/system/sitemap.json" -- specific to Fedwiki routing
         fedwiki_SendSiteMap socketID
         return the result
      case someRoute = "/style.css"
         -- can use Livecode javascript to effect the same as changing CSS
         -- daemon_SendHeaderArray someRoute, headerArray, socketID
         put daemon_GetRouteData (someRoute) into someCSS
         convertCSS someCSS
         -- put someCSS
         
         put "HTTP/1.1 200 OK" into someHeader
         put CRLF & daemon_DeconstructHeaderArray (headerArray) after someHeader
         daemon_Send someHeader, someCSS, socketID
         
         return "Sent modified CSS based on headerArray. Socket still open."
      case the number of items of someRoute = 2 and char -5 to -1 of someRoute = ".json" -- specific to Fedwiki routing
         put fedwiki_UrlPathToSlug (someRoute) into pageSlug
         fedwiki_SendPageJSON pageSlug, socketID
         return the result
      case headerArray is an array
         -- this is used for pretty much all of the site assets (javascript, css, images etc)
         daemon_SendHeaderArray someRoute, headerArray, socketID
         return "Sent something based on headerArray. Socket still open."
      default
         -- here we come across new stuff for the first time
         process_UnGot socketID, someRoute, routeData, requestArray
         return the result
   end switch
   --  put fedwiki_GetWelcomeJSON() into someHTML
end process_GET

command convertCSS @someCSS
   put lineOffset ("width: 430px;", someCSS) into lineNum
   put "  width: 350px;" into line lineNum of someCSS
   
   put lineOffset ("width: 420px;", someCSS) into lineNum
   put "  width: 344px;" into line lineNum of someCSS
   
   put lineOffset ("#persona-logout-btn {", someCSS) into lineNum
   put CR & "visibility: hidden;" after line lineNum of someCSS
   
   put lineOffset ("#persona-login-btn,", someCSS) into lineNum
   put ".searchbox {float: left}" into csssTweak
   put CR & ".menu {float: left}" after csssTweak
   put csssTweak & CR & CR before line lineNum of someCSS
      
   /*
   -- this scales everything
   put 0.91 into hScale
   put 1 into vScale
   
   put "-moz-transform: scale([[hScale]], [[vScale]]);" into extraCSS
   put CR & "-webkit-transform: scale([[hScale]], [[vScale]]);" after extraCSS
   put CR & "-o-transform: scale([[hScale]], [[vScale]]);" after extraCSS
   put CR & "-ms-transform: scale([[hScale]], [[vScale]]);" after extraCSS
   put CR & "transform: scale([[hScale]], [[vScale]]);" after extraCSS
   put CR & "-moz-transform-origin: top left;" after extraCSS
   put CR & "-webkit-transform-origin: top left;" after extraCSS
   put CR & "-o-transform-origin: top left;" after extraCSS
   put CR & "-ms-transform-origin: top left;" after extraCSS
   put CR & "transform-origin: top left;" after extraCSS
   put merge(extraCSS) into extraCSS
   put lineOffset (".main {", someCSS) into lineNum
   put CR & extraCSS after line lineNum of someCSS
   */
   
   /*
   -- this hides the whole footer
   put lineOffset ("footer {", someCSS) into lineNum
   put CR & "visibility: hidden;" after line lineNum of someCSS
   put lineOffset ("bottom: 60px;", someCSS) into lineNum
   put "  bottom: 16px;" into line lineNum of someCSS
   */
   
   /*
   -- this hides the whole footer
   put lineOffset ("footer {", someCSS) into lineNum
   put CR & "visibility: hidden;" after line lineNum of someCSS
   put lineOffset ("bottom: 60px;", someCSS) into lineNum
   put "  bottom: 16px;" into line lineNum of someCSS
   */
end convertCSS

command process_UnGot socketID, someRoute, routeData, requestArray
   -- here we come across new stuff for the first time
   -- over ride with middleware for parasitic mode
   -- dameon_AddToMiddlewareArray requestArray
   daemon_SendNotFound socketID
end process_UnGot


--> Process | PUT
-
command process_PUT someRoute, socketID, requestArray
   put daemon_GetPostData (requestArray) into putInput
   set the itemdelimiter to "/"
   -- if char 1 of someRoute is not "/" then put  "/" before someRoute
   switch
      -- /page/hikey-board/action
      case item -1 of someRoute = "action" and item 2 of someRoute = "page"
         put item 3 of someRoute into pageSlug    
         put request_ConstructHeaderArray (requestArray) into receivedHeaderArray
         put receivedHeaderArray ["Referer"] into someReferer
         put receivedHeaderArray ["Accept-Encoding"] into encodingAccepted
         put receivedHeaderArray ["Host"] into someHost
         
         --  action:{"type":"create","item":{"title":"HiKey Board","story":[]},"date":1438036497154}
         split putInput with "&" and "="
         put putInput [action] into encodedAction
         put urldecode (encodedAction) into actionJSON
         put json_ToArray (actionJSON) into actionArray
         
         fedwiki_DoAction actionArray, pageSlug
         put the result into someError
         
         -- send "ok" back
         daemon_SendText socketID, "ok"
         break
      default
         put "PUT" & CR & someRoute & CR & CR & putInput
   end switch
end process_PUT

-- function fedwiki_ConstructCreateJSON pageTitle, pCreateMilliSeconds
breakpoint
if pCreateSeconds is empty then put the seconds into pCreateSeconds

put daemon_GetRouteData ("/create-a-page.json")  into pageArray
put the milliseconds into pageArray ["journal"]["1"]["date"]
-- custom bit
-- put "Hello World!" into someText
-- fedwiki_AddParagraphToPageArray pageArray, someText

put json_FromArray (pageArray) into pageJSON
return pageJSON
end fedwiki_ConstructCreateJSON


--> Process | POST
-
command process_POST someRoute, socketID, requestArray
   switch someRoute
      case "/persona_login"
         persona_CheckAssertion requestArray, socketID
         break
      default
         put daemon_GetPostData (requestArray) into assertionJSON
         -- put "POST" & CR & someRoute & CR & CR & assertionJSON
   end switch
end process_POST

command process_DELETE someRoute, socketID, requestArray
   beep
   breakpoint
end process_DELETE


--> Daemon | Routing | Utils
-
function daemon_GetServerETagArray
   
end daemon_GetServerETagArray

command request_DeconstructArray requestArray, @socketID, @someMethod, @someRoute, @queryString, @requestUrl
   put requestArray ["socketID"] into socketID
   put requestArray ["Request Method"] into someMethod
   put requestArray ["SCRIPT_NAME"] into someRoute
   put requestArray ["QUERY_STRING"] into queryString
   put requestArray ["Requested URL"] into requestUrl
end request_DeconstructArray

function request_ConstructHeaderArray requestArray
   -- If-None-Match: "686897696a7c876b7e"
   put requestArray ["receivedheaders"] into receivedHeaders
   put daemon_ConstructHeaderArray (receivedHeaders) into headerArray
   return headerArray 
end request_ConstructHeaderArray


--> Experiments
-
function persona_ReplyToAssertion someAssertion
   /*
   The call returns a JSON structure containing a status element, which may be either "okay" or "failure". Depending on the value of status, the structure contains additional elements listed below.
   "okay"
   The assertion is valid.
   In this case the JSON structure contains the following additional elements:
   "email"	The address contained in the assertion, for the intended person being logged in.
   "audience"	The audience value contained in the assertion. Expected to be your own website URL.
   "expires"	The date the assertion expires, expressed as theprimitive value of a Date object: that is, the number of milliseconds since midnight 01 January, 1970 UTC.
   "issuer"	The hostname of the identity provider that issued the assertion.
   */
   
   put "okay" into replyArray ["status"]
   put "david.bovill@gmail.com" into replyArray ["email"]
   put "http://localhost:8082" into replyArray ["audience"]
   put the milliseconds + (1000 * 60 * 60 * 24 * 31) into replyArray ["expires"]
   put "localhost:8082/test" into replyArray ["issuer"]
   -- put "https://verifier.login.persona.org/verify" into replyArray ["issuer"]
   put json_FromArray (replyArray) into someJSON
   return someJSON
end persona_ReplyToAssertion

command persona_CheckAssertion requestArray, socketID
   daemon_SendOK socketID,  "OK mate"
   return "OK mate"
   
   -- assertion=eyJhbGciOiJSUzI1NiJ9.eyJwdWJsaWMta2V5Ijp7ImFsZ29yaXRobSI6IkRTIiwieSI6IjczNWEzYzgyNjk0MDMwZTdjNDk0ZTZkYzBiZmQ4OWUwMTg3NWRmNmRhOWMxMTMwN2I4NDk1MTJhYWNlNGZkNzQ3NjE3ODcxOTYwZGFhN2MxM2Q0YjgwYzIxNzU3MWQyYTY2ZTI4ZGUyYzJjMjM0MWRjOGFmZGZiZWU2NWViMmI5ZjA1YjQ3OGMxNDU0ODYxYWY2MjY4M2Y4OTkzN2U1NjEzNzdmNmNiZTI5ZmZhMDA2ODc1N2JhMjA5MjhhNTY5YzE0MTBkYTJlZDg2YWVlZmEyZTZjNWUzMzU2NjA2MjhkNGVlOGQxNGFjODVhMTgyYTE1ZGUzOTNmNTk4MzI0NjkiLCJwIjoiZmY2MDA0ODNkYjZhYmZjNWI0NWVhYjc4NTk0YjM1MzNkNTUwZDlmMWJmMmE5OTJhN2E4ZGFhNmRjMzRmODA0NWFkNGU2ZTBjNDI5ZDMzNGVlZWFhZWZkN2UyM2Q0ODEwYmUwMGU0Y2MxNDkyY2JhMzI1YmE4MWZmMmQ1YTViMzA1YThkMTdlYjNiZjRhMDZhMzQ5ZDM5MmUwMGQzMjk3NDRhNTE3OTM4MDM0NGU4MmExOGM0NzkzMzQzOGY4OTFlMjJhZWVmODEyZDY5YzhmNzVlMzI2Y2I3MGVhMDAwYzNmNzc2ZGZkYmQ2MDQ2MzhjMmVmNzE3ZmMyNmQwMmUxNyIsInEiOiJlMjFlMDRmOTExZDFlZDc5OTEwMDhlY2FhYjNiZjc3NTk4NDMwOWMzIiwiZyI6ImM1MmE0YTBmZjNiN2U2MWZkZjE4NjdjZTg0MTM4MzY5YTYxNTRmNGFmYTkyOTY2ZTNjODI3ZTI1Y2ZhNmNmNTA4YjkwZTVkZTQxOWUxMzM3ZTA3YTJlOWUyYTNjZDVkZWE3MDRkMTc1ZjhlYmY2YWYzOTdkNjllMTEwYjk2YWZiMTdjN2EwMzI1OTMyOWU0ODI5YjBkMDNiYmM3ODk2YjE1YjRhZGU1M2UxMzA4NThjYzM0ZDk2MjY5YWE4OTA0MWY0MDkxMzZjNzI0MmEzODg5NWM5ZDViY2NhZDRmMzg5YWYxZDdhNGJkMTM5OGJkMDcyZGZmYTg5NjIzMzM5N2EifSwicHJpbmNpcGFsIjp7ImVtYWlsIjoiZGF2aWQuYm92aWxsQGdtYWlsLmNvbSJ9LCJpYXQiOjE0Mzc5MjE0MTYyOTMsImV4cCI6MTQzNzk0MzAyNjI5MywiaXNzIjoiZ21haWwubG9naW4ucGVyc29uYS5vcmcifQ.EvWVM1tV1G52BLJQGlhf0Fi33AaCBecRRI0bKS9dD_vKBOCumqwuAr8yWqeoA_71WBwuNhqNb1X28jsgTu3cQ4HB-f1aaw6IMa0FVsZPBvgCf45yppV9oJieSYA3Vw0C459RYQ2KZ8wZ6MR_CV0-_GnHZ0YgglwO3ndlYyZFnvLaiWa434i3EK1uGoR1BHS0VQ0bIj_JBgmMoDLXLdleoroOurf4EtVFJ1EnSkdkPM4UVcr9i_Ymxo1ziLxlCZN5sbHEy21KKdRYV0p_lB3tQOtFLa0QNFKB_Ekxqri_q5ztXU3iEw_J52AphIO4s9_Ci8HOY4WjAyb4IcNj3TEuqw~eyJhbGciOiJEUzEyOCJ9.eyJleHAiOjE0Mzc5MzIzNDAzODYsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MiJ9.JLwV-q7A_Kn-KJQB_d8_tWeUEvS56LMe8mTBEicZAfRuOIp9jXniEw
   /*
   •	Get the assertion we were given from Persona on the client side
   •	Load up a payload with that assertion so we can POST it back to Persona from the Server Side.
   
   # Send the assertion to Mozilla's verifier service
   data = {"assertion": request.form["assertion"],
   "audience": "https://example.com:443"}
   resp = post("https://verifier.login.persona.org/verify",
   data=data)
   info = resp.json()
   
   •	Cool? We're in, make a local UserProfile if we need to, otherwise use the existing one.
   •	Set the FormsAuth cookie, we're good.
   
   This is a signed blob with data inside essentially saying "I promise this is foo@bar.com". 
   Still, you can't fully trust the client. So, you need to send this assertion to your server, and verify that it wasn't tampered with, and that the promise isn't a lie. 
   After successfully verifying, you can do your normal session stuff that you would normally do, 
      and then be sure in all subsequent page loads to set loggedInUser to the user's email.
      */
      
      if AvoidLoopingHack is true then
         daemon_SendOK socketID, "okay"
         put false into AvoidLoopingHack
         return "Stopped looping!"
      else
         put true into AvoidLoopingHack
      end if
      
      put daemon_GetPostData (requestArray) into assertionJSON
      put assertionJSON into replyArray
      
      split replyArray with "&" and "="
      put replyArray ["assertion"] into someAssertion
      put "http://localhost:8082" into someAudience
      
      put persona_ConstructAssertionCheck (someAssertion, someAudience) into formData
      post formData to url "https://verifier.login.persona.org/verify"
      put it into someReply
      put someReply
      
      -- "okay"
      -- "wrong-address"
      -- "failure"
      -- or empty? => logout
      
      daemon_SetSession socketID, someReply
      -- daemon_SendOK socketID, someReply -- "okay"
end persona_CheckAssertion

function persona_ConstructAssertionCheck someAssertion, someAudience
   -- put persona_SendToVerifierService (someAssertion, someAudience) into someJSON
   put libURLFormData ("assertion", someAssertion, "audience", someAudience) into formData
   return formData
end persona_ConstructAssertionCheck

function persona_SendToVerifierService someAssertion, someAudience
   put someAssertion into replyArray ["assertion"]
   put someAudience into replyArray ["audience"]
   put json_FromArray (replyArray) into someJSON
   return someJSON
end persona_SendToVerifierService
