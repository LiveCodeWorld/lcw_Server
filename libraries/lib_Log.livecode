script "lib_Log"
--> MetaData
-
name: lib_Log
type: behavior
version: 0.3
copyright: David Bovill
licence:  GPLv3

/*
This stack contains some simple scripts to create and manipulate log files.
*/

--> Log | Props
-
/*
These property handlers are here utility handlers to do basic stuff and let you know they exist.
They are not required for a functioning app.
They are crafted so that cProps of the target are set with the same name, and the app should keep working
even if the lib_Log library is not present or linked / used.
*/

getprop log_View
   return the log_View of me
end log_View

setprop log_View pControl
   if exists (pControl) is false then put empty into pControl
   set the log_View of me to pControl
   return pControl
end log_View

getprop live_Logging
   return the live_Logging of me is true
end live_Logging

setprop live_Logging someBoolean
   set the live_Logging of me to someBoolean is true
end live_Logging

getprop log_Name
   put the log_Name of me into someName
   if someName is empty then
      put "Default" into someName
      set the log_Name of me to "Default"
   end if
   return someName
end log_Name

setprop log_Name someName
   set the log_Name of me to someName
end log_Name


--> Display
-
command display_ServerLog
   put the log_View of me into logView
   if exists (logView) is false then return empty

   put the log_Text of logView into logText
   set the displayed_Log of logView to logText
   return logView
end display_ServerLog

command display_Log pDisplayError, pLogName
   if pDisplayError is empty then put the log_DisplayError of me into pDisplayError
   if pDisplayError is false then return false

   put log_GetError (pLogName) into logErrorText
   if logErrorText is empty then
      opn_Notify "Log is empty!"
      return empty
   end if

   put log_GetFile(pLogName) into pLogFile
   switch pLogName
      case "shell"
         put "Shell Log" into pTitle
         put "Global | Script | Log | Menu" into mTitle
         put "opn_ShellLog" into stackName
         break
      default
         put "Error Log" into pTitle
         put "Global | Script | Log | Menu" into mTitle
         put "opn_ErrorLog" into stackName
   end switch

   display_TextFile pLogFile, pTitle, mTitle, stackName
   put the result into pDisplayView
   put the stack_Object of pDisplayView into errorStack
   set the stack_Type of errorStack to "Log|Error"
   set the displayed_Scroll of pDisplayView to "end"

   return pDisplayView
end display_Log

function log_GetDisplayError
   -- whether of not to diplay log entries as they are added
   return the uOPN ["log_DisplayError"] of me is true
end log_GetDisplayError

command log_SetDisplayError someBoolean
   -- whether of not to diplay log entries as they are added
   set the uOPN ["log_DisplayError"] of me to someBoolean
end log_SetDisplayError


--> Log | Array
-
command logArray_AddRequest requestArray
   put logArray_Fetch() into dataArray
   put item 2 of the extents of dataArray + 1 into indexNum
   put requestArray into dataArray [indexNum]
   logArray_Store dataArray
end logArray_AddRequest

function logArray_Fetch
   put logArray_File() into someFile
   put array_Fetch (someFile) into dataArray
   return dataArray
end logArray_Fetch

command logArray_Store dataArray
   put logArray_File() into someFile
   array_Save someFile, dataArray
   return someFile
end logArray_Store

command logArray_Delete
   put logArray_File() into someFile
   delete file someFile
   return someFile
end logArray_Delete

function logArray_File
   put the daemon_RootFolder of me into rootFolder
   if rootFolder is empty then
      set the itemdelimiter to "/"
      put the filename of me into rootFolder
      put empty into item -1 of rootFolder
   end if
   put rootFolder & "log.array" into someFile
   return someFile
end logArray_File


--> Log | Text | Props
-
getprop latest_LogLine
   put the log_Name of me into pLogName
   put log_GetLatestLine (pLogName) into latestLogLine
   return latestLogLine
end latest_LogLine

setprop latest_LogLine [pLineTitle] someLine
   -- was "log_AddEntry"
   put the log_Name of me into pLogName
   put log_ConstructEntry (someLine, pLineTitle, true) into logLine
   log_SetLatestLine logLine, pLogName
   return the result
end latest_LogLine

getprop log_Text [pLogName]
   return log_Get (pLogName)
end log_Text

setprop log_Text [pLogName] fullLogText
   log_Set fullLogText, pLogName
   return the result
end log_Text


--> Log | Line
-
command log_SetTimeStampEntry logLine, pLineTitle, pLogName
   put log_ConstructEntry (logLine, pLineTitle, true) into logEntry
   log_SetLatestLine logEntry, pLogName
   return the result
end log_SetTimeStampEntry


   --> Log | Line
   -
function log_GetLatestLine pLogName
   put log_Get (pLogName) into fullLogIndex
   put line 1 of fullLogIndex into latestEntry
   return latestEntry
end log_GetLatestLine

command log_SetLatestLine logEntry, pLogName
   -- log_AddLine
   put log_GetFile (pLogName) into logErrorFile

   put "file:" & logErrorFile into logUrl
   put url logUrl into fullLogIndex
   put logEntry & CR before fullLogIndex
   put fullLogIndex into url logUrl

   return fullLogIndex
end log_SetLatestLine


--> Log | Paragraph Experiments
-
function log_GetLatestParagraphEntry pLogName
   set the itemdelimiter to tab
   put item 1 to 2 of fullLogIndex into latestEntry
   delete line -1 of latestEntry
   return latestEntry
end log_GetLatestParagraphEntry

command log_SetLatestParagraphEntry someValue, pTitle, pLogName
   put log_ConstructEntry (someLine, pLineTitle, false) into logEntry
   log_SetLatestLine logEntry, pLogName
   put the result into fullLogIndex
   return fullLogIndex
end log_SetLatestParagraphEntry

function log_GetLatestEntry pLogName, pTabBoolean
   if pTabBoolean is true then
      return log_GetLatestLine (pLogName)
   else
      return log_GetLatestParagraphEntry (pLogName)
   end if
end log_GetLatestEntry

command log_SetLatestEntry logEntry, pLogName
   log_SetLatestLine logEntry, pLogName
end log_SetLatestEntry


--> Log | Get and Set
-
function log_Get pLogName
   put log_GetFile (pLogName) into logErrorFile
   put "file:" & logErrorFile into logUrl
   return url logUrl
end log_Get

command log_Set fullLogText, pLogName
   put log_GetFile (pLogName) into logErrorFile
   if fullLogText is empty then
      delete file logErrorFile
      return empty
   else
      put "file:" & logErrorFile into logUrl
      put fullLogText into url logUrl
      return logUrl
   end if
end log_Set

command log_Clear pLogName
   log_SetError empty, pLogName
end log_Clear


--> Log | Construct and Deconstruct
-
function log_ConstructEntry someValue, pTitle, pTabBoolean
   put word 1 to -1 of someValue into someValue
   if pTabBoolean is true then
      put tab into titleDelim
   else
      put CR into titleDelim
   end if

   if pTitle is empty then
      put the internet date & titleDelim into logEntry
   else
      put pTitle & ":" && the internet date & titleDelim into logEntry
   end if
   put someValue after logEntry
   return logEntry
end log_ConstructEntry

command log_DeconstructLineEntry logLineEntry, @logValue, logTitle, @logDate
   set the itemdelimiter to tab
   put item 1 of logLineEntry into titleLine
   put item 2 of logLineEntry into logValue

   log_DeconstructTitle titleLine, logTitle, logDate
end log_DeconstructLineEntry

command log_DeconstructParagraphEntry logParagraph, @logValue, logTitle, @logDate
   put line 1 of logParagraph into titleLine
   log_DeconstructTitle titleLine, logTitle, logDate

   put line 2 to -1 of logParagraph into logValue
end log_DeconstructParagraphEntry

command log_DeconstructTitle titleLine, @logTitle, @logDate
   set the itemdelimiter to ":"
   put item 1 of titleLine into logTitle
   put item 2 of titleLine into logDate
end log_DeconstructTitle


--> Log | Files
-
function log_GetFile pLogName
   global gOPN

   if pLogName is empty then put the log_Name of me into pLogName
   put gOPN ["log_ErrorFile"][pLogName] into logFile
   if logFile is empty then
      -- let's initialize a temporary file
      log_SetTemporaryLogFile pLogName
      put the result into logFile
   end if
   return logFile
end log_GetFile

command log_SetFile logFile, pLogName
   global gOPN

   if pLogName is empty then put the log_Name of me into pLogName
   put logFile into gOPN ["log_ErrorFile"][pLogName]
end log_SetFile

command log_SetTemporaryLogFile pLogName
   put log_ConstructTemporaryFileName (pLogName) into logFile
   log_SetFile logFile, pLogName
   return logFile
end log_SetTemporaryLogFile

function log_ConstructTemporaryFileName pLogName
   if pLogName is empty then put the log_Name of me into pLogName
   put the tempname into logFile
   put "_" & pLogName after logFile
   return logFile
end log_ConstructTemporaryFileName


--> Deps
-
