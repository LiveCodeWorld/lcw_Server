script "lib_RevServer"
--> MetaData
-
name: lib_RevServer
type: behavior
version: 0.1
copyright: David Bovill
licence:  GPLv3

/*
Most of these handlers are for comaptability with other servers. 
Can probably trash the whole thing.
*/


--> libCGI
-
command libCGI_SetCookies pA
   put pA ["name"] into gCookieA ["name"]
   put pA ["value"] into gCookieA ["value"]
end libCGI_SetCookies

command libCGI_Forward pURL
   -- redirect user to another page.
   -- Handler that Forwards the user to another URL. It needs an absolute url as a parameter.
   -- This handler uses a 301 (permanent redirection) to drive the browser to a new location.
   
   local tSocketID,tContent,tRetVal,tType
   put gRequestA["socketID" ] into tSocketID
   put "should redirect to <a href=" & quote & pURL & quote & ">" & pURL & "</a>" into tContent
   put "HTTP/1.1 307 redirect" & crlf into tRetVal
   put "Content-Type: " & tType & crlf after tRetVal
   put "Location: " & pURL & crlf after tRetVal
   put "Connection: Close " & crlf after tRetVal
   put "Date: " & the date & the time & crlf after tRetVal
   put "Content-Length: " & length(tContent)  after tRetVal
   write tRetVal &  crlf & crlf & tContent to socket tSocketID
   close socket tSocketID
end libCGI_Forward

private function OKHeaders @pData, tType
   local tRetVal
   --- this function is courtesy of Mr Dave Cragg
   --  Generates the HTTPd Header with a 200 OK response. (200 OK = Yes it succeded!)
   put "HTTP/1.1 200 OK" & crlf into tRetVal
   put "Content-Type: " & tType & crlf after tRetVal
   put "Connection: Close " & crlf after tRetVal
   put "Date: " & the date & the time & crlf after tRetVal
   put "Content-Length: " & length(pData)  after tRetVal
   if gRequestA ["RevHTTP Cache settings"] is not empty then -- binds with NoCache handler.
      put gRequestA ["RevHTTP Cache settings"] after tRetVal
      put empty into  gRequestA ["RevHTTP Cache settings"] 
   end if
   return tRetVal
end OKHeaders

command libCGI_Response pContent, pContentType
   -- Handler that sends output back to the browser. the second parameter is the mime type, if missing it
   -- defaults to "text/html"
   
   if pContentType is empty then put "text/html" into pContentType
   if gCookieA["name"] is not empty then
      write OKHeaders(pContent, pContentType) & "Set-Cookie:" && gCookieA["name"] & "=" & gCookieA["value"] & ";" &  crlf & crlf & pContent to socket gRequestA["socketID"]
      close socket gRequestA["socketID"]
   else
      write OKHeaders(pContent, pContentType) & crlf & crlf & pContent to socket gRequestA["socketID"]
      close socket gRequestA["socketID"]
   end if
end libCGI_Response

private function CustomHeaders @pData, pType, pMesg
   -- Function that generates custom headers, like redirections and errors. Helper function to generate custom httpd headers.
   local tRetVal
   put "HTTP/1.1" && pType && pMesg & crlf into tRetVal
   put "Content-Type: text/html" & crlf after tRetVal
   put "Content-Length: " & length(pData)  after tRetVal
   return tRetVal
end CustomHeaders

private command cgiRawOutput pContent
   if "HTTP/1.1" is not in pContent then
      write "HTTP/1.1 200 OK" & crlf to socket gRequestA["socketID"]
   end if
   write pContent to socket gRequestA["socketID"]
   close socket gRequestA["socketID"]
end cgiRawOutput

command sendHttpError pSocketID
   write CustomHeaders ("Error: 404", 404, "file not found") & CRLF & CRLF & it to socket pSocketID
   close socket pSocketID
end sendHttpError


--> RevServer
-
on revserver_replaceGlobals @pSource
   replace "$_POST" with format("gRequestA") in pSource
   replace "$_GET" with format("gRequestA") in pSource
end revserver_replaceGlobals

on revserver_replacePutHeaders @pSource
   replace "put new header" with "put" in pSource
   replace "put header" with "put" in pSource
end revserver_replacePutHeaders

function revserver_fixSource pSource
   replace "<?rev" with format("\n<?rev\n") in pSource
   replace "?>" with format("\n?>\n") in pSource
   put false into tInsideRevTag
   repeat with x = 1 to the number of lines in pSource
      put line x of pSource into tSourceLine
      if tSourceLine is "<?rev" then
         put true into tInsideRevTag
         next repeat
      end if
      if tSourceLine is "?>" then
         put false into tInsideRevTag
         next repeat
      end if
      if tInsideRevTag then
         if word 1 of tSourceLine is "include" then
            --! Special Magick, work out the include files
            put word 2 to -1 of tSourceLine into tIncludeExpression
            put format("get URL (\"binfile:\" && %s)", tIncludeExpression) into tCMD
            do tCMD
            put revserver_fixSource(it) & cr after tFixedSource
            next repeat
         end if
         put tSourceLine & cr after tFixedSource
      else
         replace quote with ("\" & quote) in tSourceLine
         put format("put format(\"%s\")\n", tSourceLine) after tFixedSource
      end if
   end repeat
   revserver_replaceGlobals tFixedSource
   return tFixedSource
end revserver_fixSource


--> revHTTP | File and Folder Stuff
-
/*
This code may have useful stuff in it.
It is complex and generic for a server
We aim to replace it with lightweight customiseable stuff.
*/

command process_Stuff
   --- by this stage, form data is parsed and inside gRequestA. Now we'll look for a stack or a file.
   set the itemdel to "?"
   put item 1 of gRequestA ["Requested URL"] into gRequestA ["Requested URL"]
   if gRequestA ["Requested URL"] contains "launcher.cgi" then 
      put "/" & gRequestA["stack"] & ".rev" into gRequestA["Requested URL"]
   end if
   set the itemdel to "."
   get item -1 of gRequestA["Requested URL"]
   if it is "rev" then
      process_LivecodeStack
   else
      process_File
   end if
end process_Stuff

private command process_File
   -- normal file
   put it into tfileExt
   -- Adding support for aliases below.
   put cr & fld "folders" of card "setup" into tFolderAliases
   put gRequestA ["Requested URL"] into tRequestedFileURL
   set the itemdel to "/"
   put item 1 to -2 of gRequestA ["Requested URL"] into tFolder
   if tFolder is empty then put "Default" into tFolder
   -- No matter the folder requested, always find the default folder location.
   get lineOffset("Default" & tab, tFolderAliases)
   set the itemdel to tab
   put item 2 of line it of tFolderAliases into tDefaultFolder
   
   -- now, let us look for the folder...
   if tFolder is not "Default" then
      get lineOffset (tFolder & tab, tFolderAliases)
      if it is not 0 then
         set the itemdel to tab
         put line it of tFolderAliases into tAliasEntry
         put item 1 of tAliasEntry into tAlias
         put item 2 of tAliasEntry into tOriginal
         replace tFolder with tOriginal in gRequestA["Requested URL"]
         if char 1 of tOriginal is not "/" then
            get RevHTTPFolder() &"/"& tDefaultFolder & "/" & gRequestA["Requested URL"]
         else
            get gRequestA["Requested URL"]
         end if
      else
         get RevHTTPFolder() &"/"& tDefaultFolder & "/" & gRequestA["Requested URL"]
      end if
   else
      get RevHTTPFolder() &"/"& tDefaultFolder & "/" & gRequestA["Requested URL"]
   end if
   
   replace "//" with "/" in it
   if there is a file it then
      put it into tFile
      get the cMIMETypes of me
      get line (cr & lineOffset (tFileExt, it)) of it
      set the itemdel to " "
      put item 2 of it into tCT
      
      -- Andre v1.5 changes: adding support for CGI.
      get URL ("binfile:" & tFile)
      if "#!" is not in line 1 of it then -- if there's a she-bang in it, then it's CGI!
         libCGI_Response it, tCT
      else
         process_TextCGI
      end if
      -- Andre v1.5 changes end: adding support for CGI.
   else
      sendHttpError pSocketID
   end if
end process_File

private command process_LivecodeStack
   -- it is a stack
   put RevHTTPFolder() & "/stacks" & gRequestA ["Requested URL"] into someFile
   if there is a file someFile then
      -- Two steps for libCGI compatiblity, start using the stack, send the command to it.
      try
         library someFile
         send gRequestA ["cmd"] to stack someFile
      catch someError
         libCGI_Response "Error (usually wrong cmd):" && someError
      end try
   end if
end process_LivecodeStack

-- private command process_TextCGI
try
   --> Run CGI code
   -- ~~~~ Brazilian Mad Technology Below ~~~~
   -- To make Text CGI Files work we do a simple thing.
   -- First, we create an empty stack and set the script of that stack
   -- to the contents of the text file.
   -- then we send "startup" to that stack!
   -- if we did our job right, it just works.
   --
   -- ~~~~ Things to be aware ~~~~
   --  * NO STDIN so if your CGI makes use of custom libraries that try to read from standard input then
   -- you're on your on. We recommend using or libCGI or EasyCGI libraries since we trap for them below
   -- and change the code so it does not need STDIN.
   --
   --
   -- ~~~~ Conclusions ~~~~~
   -- This routines for using Text CGIs were just created, there are probably lots of places for bugs
   -- and I'll welcome help. Again this is a server created to aid in the development process and not to be
   -- used for real world serving.
   --
   put it into tCGISource
   
   -- let us avoid problems with EasyCGI libraries...
   -- get lineoffset("EasyCGI.rev", tCGISource)
   -- put "#" before line it of tCGISource
   -- put " -- comment added by RevHTTP. Only on the running copy, disk stack is intact." & cr after line it of tCGISource
   
   --  ^^^ the above item comments the line that puts EasyCGI core library in use.
   -- so if the CGI calls any EasyCGI core function then it is handled by RevHTTP EasyCGI compatibility functions.
   
   -- We also need to set the default folder so that CGIs can find their stuff.
   
   set the revmessageboxredirect to the long ID of btn "http" of cd 1 of stack "http"
   
   set the itemdel to "/"
   get item 1 to -2 of tFile
   set the defaultFolder to it
   -- We need to set the gDataA variable because it is used by EasyCGI.
   put empty into gDataA -- no garbage in my globals!
   repeat for each line tKey in the keys of gRequestA
      put gRequestA[tKey] into gDataA[tKey] -- we're copying arrays around...
   end repeat
   put "script" into tTempStackName
   create stack tTempStackName
   set the script of stack tTempStackName to tCGISource -- this line will only work in the IDE since standalones are crippled by the scriptLimits function.
   send "startup" to stack tTempStackName -- In this line we see how the magic is done!
   put empty into gDataA -- clear the global.
   set the destroyStack of stack tTempStackName to true
   close stack tTempStackName -- and then, the temporary stack is gone!
catch n
finally
   cgiRawOutput lBuffer
   put empty into gDataA
   put empty into gRequestA  
   set the revmessageboxredirect to empty
end try
end process_TextCGI


--> Process | Utilities
-


private function RevHTTPFolder
   -- Silly function to find the revHTTP folder.
   set the itemDelimiter to "/"
   get item 1 to -2 of the effective filename of this stack
   return it
end RevHTTPFolder

private function removePSocketId pSocketID, socketDataArray
   /*
   This deletes (removes) all data associated with pSocketID
   Now we can just delete the subArray
   
   Culls request data out of the gSocketData array,
   when that data is completely collected and now being processed.
   This keeps gSocketData from retaining every last set of request data until it fills up all available memory
   */
   put the itemDelimiter into oDelim
   set the itemDelimiter to comma
   put empty into tempSocketData
   put the keys of socketDataArray into theKeys
   repeat with x = 1 to the number of lines in theKeys
      put line x of theKeys into thisKey
      switch
         case item 1 of thisKey = pSocketId
            break
         default
            put socketDataArray [thisKey] into tempSocketData [thisKey]
            break
      end switch
   end repeat
   set the itemDelimiter to oDelim
   return tempSocketData
end removePSocketId
